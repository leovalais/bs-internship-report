#+TITLE: Rapport de stage chez BeSport
#+SUBTITLE: Contribution au projet libre Ocsigen
#+AUTHOR: Léo Valais (valais_l)
#+EMAIL: leo.valais@epita.fr
#+DATE: 12 septembre 2018 --- 15 janvier 2019
#+LANGUAGE: fr
#+STARTUP: content noinlineimages fnadjust hideblocks latexpreview
#+OPTIONS: ^:{} _:{} ':t H:4


#+BEGIN_COMMENT
L'exporter de latex se trouve dans le fichier ox-latex.el
de org-plus-X/ dans elpa/.
Peut-être supprimer l'exporter d'example pour générer simplement
un \begin{example}\end{example} où l'environment peut être définit
comme on veut.
#+END_COMMENT
#+NAME: setup-emacs-and-org
#+BEGIN_SRC elisp :exports results :results silent
  ;; Load default configuration
  (load-file "org-config.el")

  ;; Your custom configuration here
  (org-latex-add-custom-lang-environment 'wiki "wikicode")
  (org-latex-add-custom-lang-environment 'wikinline "wikinline")
  (org-latex-add-custom-lang-environment 'shellinline "shellinline")
#+END_SRC

#+LATEX_HEADER: \usecodeboxmintedstyle{zenburn}
#+LATEX_HEADER: \newminted[wikicode]{text}{}
#+LATEX_HEADER: \setmintedcodebox{wikicode}{title=Wikicréole,icon=\faWikipediaW}
#+LATEX_HEADER: \newminted[wikinline]{text}{}
#+LATEX_HEADER: \setmintedcodebox{wikinline}{headless,compact,shadow=false}
#+LATEX_HEADER: \newminted[shellinline]{shell}{}
#+LATEX_HEADER: \setmintedcodebox{shellinline}{headless,compact,shadow=false}

#+LATEX_CLASS: classyreport
#+LaTeX_CLASS_OPTIONS: []

#+LATEX_HEADER: \usepackage[french]{babel}
#+LATEX_HEADER: \usepackage{xparse}
# #+LATEX_HEADER: \usepackage[ttdefault,scale=0.85]{sourcecodepro}
#+LATEX_HEADER: \usepackage[sfdefault,light]{FiraSans} %% option 'sfdefault' activates Fira Sans as the default text font
#+LATEX_HEADER: \usepackage{FiraMono}
# #+LATEX_HEADER: \usepackage{fancyhdr}
# #+LATEX_HEADER: \usepackage[top=2cm,bottom=2cm,left=3cm,right=2cm,headheight=17pt,includehead,includefoot,heightrounded]{geometry}
# #+LATEX_HEADER: \usepackage[texcoord,grid,gridunit=mm,gridcolor=red!20,subgridcolor=gray!10]{eso-pic}

#+LATEX_HEADER: \renewcommand*\oldstylenums[1]{{\firaoldstyle #1}}
#+LATEX_HEADER: \usetikzlibrary{positioning,shapes}

#+MACRO: acr \textsc{$1}
#+MACRO: lrde {{{acr(Lrde)}}}
#+MACRO: inria {{{acr(Inria)}}}
#+MACRO: irill {{{acr(Irill)}}}
#+MACRO: api {{{acr(Api)}}}
#+MACRO: lang $1
#+MACRO: cl Common Lisp
#+MACRO: ocaml OCaml
#+MACRO: html {{{acr(Html)}}}
#+MACRO: css {{{acr(Css)}}}
#+MACRO: wikiext \sloppy\code{<\relax <$1>\relax >}
#+MACRO: wikilink \sloppy\code{[[$1]]}
#+MACRO: ci {{{acr(ci)}}}
#+MACRO: travis Travis {{{ci}}}

#+LATEX_HEADER: \begin{frontmatter}
#+LATEX_HEADER: \includegraphics[scale=.25]{html_of_wiki.png}\par
#+LATEX_HEADER: Simplification, amélioration et extension d'un compilateur wikicréole \(\rightarrow\) \textsc{html} existant. Planification et exécution d'un plan de déploiement de celui-ci pour tous les projets Ocsigen. Mise en place d'un processus d'intégration continue à l'aide de Travis \textsc{ci}.
#+LATEX_HEADER: \end{frontmatter}

#+BEGIN_COMMENT
TODO
- étoffer l'introduction
- finir et peaufiner [[fig:how-arch]]
- styliser les tableaux
- fancyhead, fancyfoot
- références explicite (figure X on front page) + en français
- modifier org-latex-src-block pour inclure automatiquement un listing lorsqu'il détecte un caption ou name
- factoriser les wikinline et shellinline
- permettre d'include le frontmatter dans le document et ne l'inclure qu'à la deuxième passe de latex (mettre dans un fichier à la première).
#+END_COMMENT

#+BEGIN_EXPORT latex
%% Some Tikz functions to build a filesystem-like tree.
%% TODO: remove the necessity of the parent node for fsnode.
\makeatletter
\newcommand{\fsleaf}[3][fsleaf]{% [opts], name, text
  \node[below=\value{fs@cnt\fs@parent} of \fs@parent] (fsanch-#2) {};%
  \node[right=.25 of fsanch-#2,#1] (#2) {#3};%
  \draw (\fs@parent) |- (#2);%
  \stepcounter{fs@cnt\fs@parent} % add .west and place it on top of the command
}
\NewDocumentEnvironment{fsnode}{O{fsnode}mmm}{% [opts], parent, name, text
  \newcounter{fs@cnt#3}
  \fsleaf[#1]{#3}{#4}%
  \def\fs@parent{#3}
}{%
  \addtocounter{fs@cnt#2}{\value{fs@cnt#3}}%
}
\newenvironment{fsroot}[3][fsnode]{%
  \newcounter{fs@cnt#2}
  \def\fs@parent{#2}
  \node[#1] (#2) {#3};%
}{}
\newcommand{\fsdots}{\fsleaf{fsdots-\fs@parent}{\(\cdots\)}}
\makeatother
#+END_EXPORT

* Introduction
Ayant travaillé sur un projet en {{{cl}}} au {{{lrde}}}\(\)[fn:1], je souhaitais trouver
un stage centré sur la programmation fonctionnelle, de préférence avec un langage
statiquement typé. Mon choix s'est porté sur l'offre de stage de la startup /BeSport/
essentiellement pour deux raisons :

1. leur langage de prédilection est {{{ocaml}}}. C'est un langage fondamentalement
   fonctionnel, statiquement typé développé à l'{{{inria}}}\(\)[fn:2]. Cela correspond donc
   parfaitement à mes attentes en termes de technologies.
2. leurs applicatifs (/backend/, /frontend/, /importation de données/, etc.) sont
   entièrement développés en {{{ocaml}}}, notamment grâce au
   [[https://ocsigen.org][projet Ocsigen]], permettant le développement d'applications dites /multi-tiers/.
   Habituellement développées en {{{lang(JavaScript)}}} (NodeJS pour le backend et
   ReactJS, Angular ou VueJS pour le frontend le plus souvent), l'utilisation de
   {{{ocaml}}}, de sa /rigueur/, de son /système de types fort/, sur
   /l'intégralité de la stack/, permet entres autres :
   - de partager les structures de données et fonctions entre le code client et
     le code serveur,
   - de vérifier statiquement les pages web générées pour être conforme à la
     [[https://www.w3.org/standards/][norme W3C]],
   - toujours bénéficier des technologies {{{lang(JavaScript)}}} de pointe grâce
     au compilateur \sloppy[[http://ocsigen.org/js_of_ocaml/][Js_of_ocaml]], et
   - pouvoir exporter l'application autant vers le web que le mobile (iOS et
     Android).

-----

Le sujet proposé sur la convention est :
#+BEGIN_QUOTE
[...] Le but du stage est de développer de nouveaux modules pour les applications Web
et mobiles Be Sport : outils d'importation de données, amélioration des outils de
développement (dans le cadre du projet libre Ocsigen), développement de widgets
spécifiques, interaction avec la base de données, mise en place de tests de l'application.
Le stagiaire s'occupera des spécifications en collaboration avec les membres de
l'équipe, puis travaillera sur un prototype et ira jusqu'à la mise en production.
#+END_QUOTE

Ce sujet, vaste, permet d'avoir un aperçu des différentes fonctionnalités de BeSport
tout en exploitant au maximum les possibilités du langage {{{ocaml}}} et du projet
Ocsigen.

Cependant, en arrivant, il m'a été confié une mission plus urgente que le développement
de l'application BeSport :
/la création d'un outil ergonomique de gestion de la documentation du projet Ocsigen pour GitHub Pages/.
En effet, la documentation est écrite dans un format particulier ([[http://ocsigen-1.inria.fr/ocsimore/dev/manual/wiki][le wikicréole]]) muni d'extensions
propriétaires, qu'il est nécessaire de compiler vers de l'{{{html}}} à chaque modification de celle-ci.
C'était le but de Ocsimore et Ocsiforge, outils du projet Ocsigen, aujourd'hui dépréciés.
Les remplacent un outil interne, lourd, monolithique et peu flexible, qu'il m'a été demandé de remplacer.
Ma mission consiste donc à développer cet outil, simple, ergonomique et flexible, générant les pages
de documentation au format {{{html}}}, afin de les télé-verser vers GitHub Pages.

Une fois cela terminé, mon travail se portera davantage vers la plate-forme BeSport,
notamment en ce qui concerne /l'importation de données/.

-----

Mes attentes par rapport à ce stage sont multiples.
- Découvrir l'utilisation professionnelle de langages fonctionnels et de {{{ocaml}}}
  en particulier.
- Découvrir la programmation multi-tiers au travers du projet Ocsigen.
- Une introduction à l'univers de la startup et les différentes méthodologies
  de travail telles qu'{{{acr(Agile)}}} et {{{acr(Scrum)}}} et les pratiques associées.
- Une introduction aux tâches de /DevOps/, en particulier l'intégration continue
  ({{{acr(Ci)}}}) en milieu professionnel.
- Une première expérience de la collaboration à plus grande échelle que les
  projets scolaires, avec des enjeux réels.

* Présentation de BeSport
** L'entreprise
BeSport est une /startup/ développant un /réseau social/ du même nom.
Ce dernier, disponible sur toutes les plate-formes majeures, c'est-à-dire
/le web, iOS et Android/, est destinée, comme son nom l'indique, au milieu
du sport.

Travaillent chez BeSport les personnes listées ci-dessous, dans trois "équipes" distinctes :
une équipe /technique/, chargée du développement de la plate-forme et une équipe /sport/
qui est chargée de fournir du contenu sportif ainsi que de garantir que le produit soit
au plus proche des besoins du sport possible. Il y a aussi naturellement une équipe
administrative.

S'ajoutent à cela quatre stagiaires, moi compris.

*** Équipe technique
- Vincent Balat :: {{{acr(Cto)}}}
- Jérôme Vouillon :: Ingénieur de recherche OCaml et Ocsigen
- Jan Rochel :: Ingénieur de recherche
- Rémy El Sibaïe :: Développeur
- Idir Lankri :: Développeur
- Baptsite Strazzula :: Développeur
- Maya El Sibai :: {{{acr(Ui)}}}/{{{acr(Ux)}}} designer
- Papa Mor Faye :: Data scientist
- Kolia Iakovlev :: Data scientist/importation de données

*** Équipe administrative
- Phillipe Robert :: {{{acr(Ceo)}}}
- Léa Hubsch :: Ressources humaines & stratégie

*** Équipe sportive
- Benoit Guyot :: Responsable sportif
- Jean Marc Gillet :: Journaliste sportif
- Léopold Rucher :: Journaliste sportif
- Hugo Bruchet :: Journaliste sportif
- François Trillo :: Journaliste sportif
- Raphaelle Steg :: Journaliste sportif

** Le service
*** Le réseau social BeSport
Le réseau social BeSport est né du constat que le milieu du sport avait encore
peu bénéficié de cette "transformation numérique" censée toucher toutes les
activités. En effet, le sport reste très hiérarchisé et presque exclusivement
relayé par les "médias traditionnels" tels que la télévision et la radio.

Le projet BeSport, ambitieux, vise donc à mettre à disposition une plate-forme
qui mettrait tout cela "à plat". Elle est conçue pour un panel d'utilisateurs
très large, allant des /professionnels/ du sport aux /pratiquants/ (athlètes) en
passant par les simples /"fans"/ de sport.

BeSport veut aussi se distinguer sur deux dimensions : la /"largeur"/ et la
/"profondeur"/. La largeur est le panel de sport supportés et la profondeur
est l'écart de niveau supporté pour un sport donné. BeSport veut donc supporter
le maximum de sports possible --- c'est-à-dire pas juste le football et le rugby,
mais aussi des sports moins populaires (ou moins médiatisés) tels que le surf
ou le hockey sur glace. De plus, BeSport veut avoir le plus de profondeur
possible dans chaque sport : chacun d'eux doit être représenté, que ce
soit au niveau professionnel ou olympique qu'au niveau amateur ou des clubs
locaux.

BeSport a donc pour objectif de toucher le monde du sport au sens large :
*tous les sports, à tous niveaux*. Pour cela, BeSport doit d'abord
être techniquement disponible sur toutes les plate-formes (web et mobile) :
il a donc été choisi que le réseau social serait développé avec l'aide
du projet Ocsigen.

*** Le projet Ocsigen
Le projet Ocsigen est un projet /open-source/ développé à l'{{{irill}}}\(\)[fn:3], en {{{ocaml}}},
servant à développer des applications dites /multi-tiers/ dans ce même
langage. Ce projet est composé de différents sous-projets indépendants mais permettant,
lorsqu'utilisés conjointement, de développer /l'intégralité d'une application web en {{{ocaml}}}/,
/backend/ et /frontend/ compris. Parmi ceux-ci l'on peut citer les plus populaires :
- Js_of_ocaml :: un compilateur de /bytecode/ {{{ocaml}}} \rightarrow {{{lang(JavaScript)}}},
- Eliom :: /framework/ pour la programmation multi-tiers,
- Tyxml :: bibliothèque permettant de construire des pages {{{html}}} en {{{ocaml}}}.

-----

Il y a de nombreux avantages à utiliser un langage comme {{{ocaml}}} pour développer
des applications web complexes, par exemple :
- c'est un langage fonctionnel et rigoureux moins sensible aux erreurs une fois
  déployé,
- son système de types fort et poussé permet (à l'aide de Tyxml), de ne générer que
  des pages {{{html}}} conformes à la [[https://www.w3.org/standards/][norme W3C]],
- c'est un langage pensé pour être fonctionnel en son coeur, paradigme qui ne se rajoute
  qu'aujourd'hui dans le milieu du développement web (comme une "sur-couche" sur des
  langages pas vraiment pensé pour cela au départ), ou encore,
- avoir /un seul/ programme, /cohérent/ puis-qu'écrit dans un seul et même langage, au lieu
  d'un programme client plus un programme serveur plus un middleware dans le cloud plus etc.
  tous écrits dans des langages différents.

Consulter l'annexe [[sec:anx-pmt]] pour plus d'informations sur le projet Ocsigen et sur
la programmation multi-tiers, avec des exemples de code.

** Le positionnement du stage dans les travaux de l'entreprise
C'est d'abord dans le cadre d'une /contribution au projet Ocsigen/ que mon
stage se porte. En effet, BeSport utilisant un projet de recherche open-source
comme /stack/, l'entreprise dispose d'un financement recherche afin de continuer
à maintenir et développer le projet Ocsigen.

Ma première mission est donc de reprendre et transformer un outil interne de
gestion de la documentation du projet afin de le rendre plus ergonomique,
flexible et plus complet que le précédent. L'objectif final étant de l'inclure
dans la liste des projets "publics" du projet Ocsigen comme outil
générique de gestion de documentation.

* Le travail effectué --- one_html_of_wiki
** But général<<sec:ohow-but-grl>>
*** Le wikicréole
Le projet Ocsigen est vieux de plus de dix ans. Les formats de documentation
actuellement répandus, tels que le /Markdown/ ou le /reStructured Text/, n'existaient
alors pas ou commençaient à émerger. Le seul format alors en vigueur était le format
/wiki/ de Wikipédia, et toutes ses déclinaisons. C'est l'une d'entre elles qui
a été choisie pour la documentation du projet Ocsigen : le /wikicréole/.
Le wikicréole, qui a l'avantage d'être arrivé plus tard que ses concurrents,
est pensé pour corriger les erreurs de conception que ces derniers ont pu
commettre, tout en conservant l'esprit et la syntaxe générale de ceux-ci.

#+NAME: lst:example-wiki
#+CAPTION: Exemple de texte formatté en wikicréole.
#+begin_listing
#+INCLUDE: "example.wiki" src wiki
#+end_listing

Le listing [[lst:example-wiki]] montre un texte formatté en wikicréole. C'est donc
un format léger et relativement pratique à utiliser, mais il est nécessaire de le
convertir en {{{html}}} pour pouvoir le publier (sur GitHub Pages dans le cas de BeSport).

*** Ocsimore et Ocsiforge
C'était le but des outils Ocsimore et Ocsiforge, autrefois partie du projet
Ocsigen, aujourd'hui déprécies et plus maintenus.

Leur rôle était de fournir une infrastructure permettant de gérer la documentation
d'un ensemble de projets. Ils servaient, entres autres, à:
- convertir la documentation de chaque projet du wikicréole vers de l'{{{html}}},
- insérer les pages web dans des /templates/ (de patrons) de page web,
- gérer les différentes version de la documentation de chaque projet,
- gérer les permissions sur l'écriture de la documentation,
- déployer la documentation générée sur internet,
- proposer un blog, un newsfeed, un blog, etc., et
- gérer un base d'utilisateurs s'étant inscrits sur le site déployé.

De plus, Ocsimore a ajouté au wikicréole un système /d'extensions/ afin d'étendre
les possibilités du langage. Schématiquement, les extensions fonctionnent de la manière
suivante:
- Chaque extension s'enregistre auprès du compilateur (elle donne son nom ---
  par exemple ~"myext"~ --- et une fonction {{{ocaml}}} --- ~f~).
- Lorsque l'extension est rencontrée dans fichier --- {{{wikiext(myext arg="val" | content)}}} ---
  le compilateur appelle la fonction associée --- ~f [("arg", "val")] content~.
- La fonction retourne alors le code {{{html}}} qui sera mis à la place de l'extension
  le fichier final.
Ce puissant système d'extensions naturellement /Turing-complet/
permet d'étendre considérablement le wikicréole.

Cependant ces projets devenant trop lourds et difficile à maintenir, leur support
et leur développement a été arrêté et une majorité de leur fonctionnalités
abandonnées. Mais parmi celles-ci,
/l'exportation des wikis vers des pages {{{html}}} se devait d'être conservée/
pour garantir la disponibilité de la documentation aux utilisateurs du projet Ocsigen.

*** html_of_wiki
C'est dans cette optique qu'est né le projet html_of_wiki[fn:4] (abrégé =how=).
Cet outil reprend une partie du code d'Ocsimore, l'analyseur syntaxique (/lexer/)
et l'analyseur grammatical (/parser/), mais est /complètement dédié au projet Ocsigen/.
C'est donc un outil /interne/. Son objectif initial devait être simplement de convertir
le wikicréole en {{{html}}}. Cependant, comme ce projet est en réalité une
/simplification d'Ocsimore/, il est à cause de cela soumis à un certain nombres
de contraintes, en particulier en termes de condition d'utilisation. Pour comprendre
en quoi la présence de ces contraintes d'utilisation est indésirable, il faut
d'abord s'intéresser au fonctionnement de =how=.

1. =how= clone le dépôt git dédié nommé =ocsigen.org-data=, qui contient la documentation
   de chaque version de chaque projet.
2. =how= compile ensuite chaque fichier ~*.wiki~ en un fichier {{{html}}}, tout en
   s'assurant que chaque lien et valide (signale les liens morts) et que les
   /extensions/ sont bien exécutées.
3. Les pages {{{html}}} sont ensuite placées dans un dossier ~ocsigen.org-repositories/~.
4. Ces pages sont enfin copiées dans la branche ~gh-pages~ du projet auquel elles
   appartiennent et sont poussées vers GitHub.

Plusieurs inconvénients majeurs se distinguent déjà.
- Ou bien l'on génère /toute/ la documentation, ou bien l'on ne génère /rien/.
  Il n'est pas possible de ne compiler que quelques fichiers choisis, ou qu'une
  version donnée d'un projet donné.
- /Toute/ la documentation de /toutes/ les versions de /tous/ les projets
  se trouve dans /un seul/ dépôt =ocsigen.org-data=. Celui-ci est donc trop lourd
  (plusieurs gigaoctets).
- Il faut penser manuellement à ajouter les nouvelles versions de chaque projet à
  ce dépôt.
- La nécessité de =ocsigen.org-data= induit une forte désorganisation au sein
  des projets :
  - le code d'un projet $X$ se trouve sur ~master~ dans le dépôt $X$,
  - les wikis de $X$ se trouvent se trouvent dans le dossier $X$ de =ocsigen.org-data=, et
  - les pages {{{html}}} générées se trouvent sur la branche ~gh-pages~
    du dépôt $X$.

D'autre part, =how= souffre également des problèmes suivants:
- La page d'accueil \sloppy[[https://ocsigen.github.io]] doit être traitée comme un cas
  particulier[fn:5].
- Les liens générés sont des liens /absolus/, ce qui proscrit toute modification
  de l'architecture des projets ou du site au risque de casser la plupart des liens.
- Puisque la gestion des versions est manuelle, la gestion des redirections l'est
  aussi[fn:6].
  #+begin_ex
  La page d'accueil du projet Eliom doit être ~eliom/2.8/intro.html~,
  en supposant que =2.8= est la dernière version en date. Il faut alors créer le
  lien symbolique ~index.html~ à la racine du projet sur la branche ~gh-pages~
  et le faire pointer vers ~intro.html~. À la sortie de la version =2.9=, il
  faut alors penser à placer les wikis dans ~ocsigen.org-data/eliom~, mais aussi
  à mettre à jour le lien ~eliom/index.html~ décrit ci-dessus.
  #+end_ex
- Un certain nombre d'inconvénients mineurs (par exemple, devoir mettre les wikis
  ayant le rôle de manuel d'utilisation dans un dossier ~src/~).

La figure [[fig:how-arch]] illustre et résume la (lourde) architecture nécessaire pour faire
fonctionner html_of_wiki.

=how= est donc un outil qui fonctionne, mais lourd, monolithique, peu flexible
et peu ergonomique. La mission de créer un outil pour le remplacer m'a donc été confiée.

#+NAME: fig:how-arch
#+CAPTION: Architecture nécessaire pour faire fonctionner html_of_wiki.
#+begin_figure
#+INCLUDE: "how-arch.tex" export latex
#+end_figure

*** one_html_of_wiki
L'idée était donc de simplifier drastiquement =how= mais en le privant du minimum
de fonctionnalités possible. Ce nouvel outil devait être capable de compiler les
wikis /un par un/ et *sans examen de dépendances* pour la construction des liens.
C'est pour cela que cet outil a été nommé one_html_of_wiki (abrégé =ohow=).
Cet outil se devait d'être /simple/ et /composable/ (plus en accord avec la
philosophie Unix). Cependant, cela implique la nécessité d'un
outil supplémentaire, capable d'utiliser =ohow= pour générer la documentation
/d'une version entière/ d'un projet donné : doc_of_project (abrégé =dop=).
Ces deux outils ont donc principalement pour but de :
- remplacer définitivement =how=,
- avoir la possibilité de placer la documentation des projets ailleurs que
  dans ~ocsigen.org-data~ et de s'en débarrasser,
- garder la syntaxe wikicréole extensible, et surtout,
- /reproduire le site existant au minimum à l'identique/ (au mieux avec
  quelques améliorations).

Le listing [[lst:example-html]] montre le code {{{html}}} généré par =ohow= à partir
du wikicréole du listing [[lst:example-wiki]].

#+BEGIN_SRC shell :exports none :results silent
eval $(opam config env)
/home/vleo/work/besport/html_of_wiki/ohow.byte --headless example.wiki
#+END_SRC

#+NAME: lst:example-html
#+CAPTION: Le code {{{html}}} du wiki du listing [[lst:example-wiki]] produit par one_html_of_wiki.
#+begin_listing
#+INCLUDE: "example.html" src html
#+end_listing

L'objectif principal est de remplacer l'utilisation de =how= en /interne/. Cependant,
dans un second temps et selon mon choix, il est aussi possible de pousser le
développement de ces outils plus loin, afin de les /distribuer/ et de les rendre
utilisables par la communauté {{{ocaml}}} (en réalité par tous ceux ayant ou
souhaitant avoir de la documentation écrite en wikicréole extensible).

** Cahier des charges
Comme expliqué dans la [[sec:ohow-but-grl][section "But général"]], le cahier des charges pour ce projet
dépasse la simple réalisation de l'outil one_html_of_wiki. Les principaux
objectifs de cette mission sont les suivants.

- Remplacer html_of_wiki par la combinaison de deux outils: one_html_of_wiki,
  le compilateur wikicréole \rightarrow {{{html}}} qui opère fichier par fichier et
  doc_of_project, qui opère version de projet par version de projet,
- conserver le même format de wikicréole et les même extensions (100% rétrocompatible avec =how=),
- être capable, à l'aide de ces outils, de régénérer le site [[https://ocsigen.org]]
  à l'identique,
- l'améliorer et régler ses différents problèmes techniques (barre de recherche,
  design, etc.),
- trouver une solution pour se passer du dépôt ~ocsigen.org-data~, et,
- éventuellement rendre =ohow= suffisamment indépendant de l'infrastructure
  du projet Ocsigen pour pouvoir le diffuser et qu'il puisse être utilisé
  sur d'autres projets.

L'on commence par spécifier le langage que doit supporter =ohow=, puis l'on dresse
son cahier des charges détaillé. Nous continuons par la description de celui
de =dop= et finissions par la liste des objectifs à atteindre quant à l'organisation
du projet Ocsigen.

*** Le langage à supporter : le wikicréole extensible
**** Le wikicréole
La spécification du langage wikicréole utilisée par le projet Ocsigen est décrite
dans l'annexe [[sec:anx-wikicreole]].

**** Les extensions
La documentation du projet Ocsigen s'appuie fortement sur une construction syntaxique
particulière : /les extensions/. Ce sont des constructions non-standard du wikicréole
développées afin d'augmenter les capacités du langage en permettant l'exécution de
code {{{ocaml}}} /pendant la compilation/ du fichier.

Concrètement, les extensions ont la syntaxe suivante:
#+BEGIN_SRC wikinline
  <<extension_name attr1="val1" attr2="val2" ... attrN="valN" | content>>
#+END_SRC

#+begin_note
- Les attributs sont conçus pour avoir des valeurs (~val1~, ~val2~, etc.) contenant
  du /texte brut/ à utiliser comme paramètre pour la fonction {{{ocaml}}}.
- En revanche, le contenu ~content~ de l'extension peut contenir du wikicréole,
  /arbitrairement complexe/, s'étendant possiblement sur plusieurs lignes, pouvant
  lui aussi /contenir des extensions/ et est donc conçu pour être /compilé récursivement/.
#+end_note

L'auteur de chaque extension doit alors /l'enregistrer auprès du compilateur/ de
wikicréole en lui fournissant le *nom* de l'extension (ici ~"extension_name"~) ainsi
qu'une *fonction {{{ocaml}}}* qui sera appelée à chaque fois que l'extension
est rencontrée dans le fichier en train d'être compilé. Cette fonction doit
retourner du code {{{html}}} qui sera positionné à l'endroit où se situe l'extension
dans la page web produite.

Le listing [[lst:ext-ex]] illustre comment ajouter une extension au compilateur décrit dans
le paragraphe suivant et permet de comprendre aisément en quoi ce système est très
puissant de par sa capacité à exécuter du code arbitrairement complexe au coeur du
processus de compilation.

#+NAME: lst:ext-ex
#+CAPTION: Code {{{ocaml}}} nécessaire pour ajouter l'extension ~colored~.
#+begin_listing
#+INCLUDE: "ext-ex.ml" src ocaml
#+end_listing

Le tableau [[tab:ext-to-support]] liste et décrit les extensions (et leur attributs[fn:7])
définies pour le projet Ocsigen que =ohow= doit pourvoir supporter[fn:8].

#+NAME: tab:ext-to-support
#+CAPTION: Extensions Ocsigen que =ohow= doit impérativement supporter.
#+begin_table
#+LATEX: \small
|------------------------+------------------------------------+---------------------------------------------------|
| Nom                    | Attributs                          | Courte description                                |
|------------------------+------------------------------------+---------------------------------------------------|
| ~a_api_code~           | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API (implantation).       |
| ~a_api_type~           | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API (déclarations).         |
| ~a_api~                | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API du projet donné.        |
| ~a_file~               | ~src~                              | Insère un lien vers un fichier quelconque.        |
| ~a_img~                | ~src~                              | Insère une image.                                 |
| ~a_manual~             | ~project~, ~chapter~, ~version~    | Insère un lien vers le chapitre donné.            |
| ~client-server-switch~ |                                    | Insère un lien API client \leftrightarrow API serveur.          |
| ~code-inline~          | ~language~                         | Insère du code à l'intérieur d'un paragraphe.     |
| ~code~                 | ~language~                         | Insère un bloc de code.                           |
| ~div~                  |                                    | Insère un élément {{{html}}} ~<div>~.             |
| ~doctree~              |                                    | Insère le menu du projet.                         |
| ~docversion~           |                                    | Insère une liste de versions à afficher.          |
| ~drawer~               |                                    | Insère un menu latéral déroulant.                 |
| ~googlesearch~         |                                    | Insère une barre de Google Search.                |
| ~nav~                  |                                    | Insère un élément {{{html}}} ~<nav>~.             |
| ~pre~                  |                                    | Insère un élément {{{html}}} ~<pre>~.             |
| ~reason-switch~        |                                    | Convertit le {{{ocaml}}} en {{{lang(ReasonML)}}}. |
| ~script~               | ~src~                              | Insère un script {{{lang(JavaScript)}}}.          |
| ~span~                 |                                    | Insère un élément {{{html}}} ~<span>~.            |
| ~wip-inline~           |                                    | De même mais à l'intérieur d'un paragraphe.       |
| ~wip~                  |                                    | Marque un contenu "Work In Progress".             |
| extension sans nom     |                                    | N'insère rien : a fonction de commentaire.        |
|------------------------+------------------------------------+---------------------------------------------------|
#+end_table

**** Le compilateur wikicréole \rightarrow {{{html}}}
Comme expliqué dans la section [[sec:ohow-but-grl]], =ohow= doit être construit par dessus
=how=, lui-même écrit à partir de Ocsimore et Ocsiforge. Ces derniers avaient
implanté un compilateur wikicréole \rightarrow {{{html}}} écrit en {{{ocaml}}} afin de
pouvoir remplir leur fonction. Ce compilateur a été repris par =how= et
/doit également être réutilisé par =ohow=/.

Cependant celui-ci doit d'être /modifié/, notament ce qui concerne la génération
de liens entre les pages web. En effet, les liens générés sont des /liens absolus/,
trop rigides (il est impossible de tester localement le site web généré puisque les
liens pointent vers des URLs comme [[https://ocsigen.org/project/page]]). Il faut donc
modifier les procédures concernées afin de générer les /liens relatifs/, plus flexibles,
mais plus contraignants à implanter.

*** L'outil principal : one_html_of_wiki<<sec:cdc-ohow>>
La fonction de one_html_of_wiki est /simple/ et /unique/[fn:9]:
#+BEGIN_QUOTE
Pouvoir compiler les fichiers wikicréole *individuellement* et *sans examen de dépendances* (compilation *isolée*).
#+END_QUOTE

C'est-à-dire que =ohow= peut être appelé à compiler un fichier ~mydoc.wiki~ et
doit produire ~mydoc.html~, document {{{html}}} consultable depuis un navigateur
web et conforme à la [[https://www.w3.org/standards/][norme W3C]]. L'outil doit avoir généré des liens /relatifs/ et
/valides/ sans vérifier que la page de destination existe.

**** Objectifs
- C'est un outil en /ligne de commande/, écrit en {{{ocaml}}} qui doit réutiliser le
  compilateur wikicréole \rightarrow {{{html}}} de =how=.
- Le fichier wikicréole à compiler ne doit pas être modifié.
- Les pages {{{html}}} produites doivent être complètes (avec un en-tête ~<head>~ correct).
- Il doit être possible de ne pas générer cet en-tête avec l'option ~--headless~.
- Les pages {{{html}}} produites doivent être conformes à la [[https://www.w3.org/standards/][norme W3C]].
- Les liens générés doivent être _tous_[fn:10] relatifs.
- Il ne doit pas y avoir d'examen de dépendances.
- Il doit être possible de tester les pages localement avec des liens redirigeant
  vers des adresses existantes (option ~--local~).
- Il doit gérer (au minimum) les extensions listées par le tableau [[tab:ext-to-support]].
- Les URLs produites par =ohow= doivent être /compatibles/ avec celles générées par
  =how=. Cela a pour effet de ne pas casser les liens que des sites tiers font
  avec la documentation.

**** Interface à respecter
- Il doit y avoir une option ~--print~ pour afficher le code {{{html}}} résultant
  dans la console (sortie standard) afin de pouvoir être composé[fn:11].
- Il doit y avoir une option ~--output FILE~ pour sélectionner le nom du fichier
  {{{html}}} de sortie. En conséquence, les deux commandes du listing [[lst:ohow-equiv]]
  doivent produire /exactement/ le même résultat.
- Pour des raisons de commodité, =ohow= doit pouvoir accepter plusieurs fichiers
  en entrée mais les résultats dans ce cas-là doivent être /strictement les mêmes/
  que si =ohow= avait été exécuté $n$ fois pour chacun des $n$ fichiers donnés.
- Il doit y avoir une option ~--help~ qui affiche la liste des options disponibles
  et qui fournit une description succinte de l'outil.
- La version de l'outil doit pouvoir être affichée avec l'option ~--version~.

#+NAME: lst:ohow-equiv
#+CAPTION: Relation entre les options ~--print~ et ~--output~ de =ohow=.
#+begin_listing
#+BEGIN_SRC shell
  $ ohow --output out.html mydoc.wiki # has the same effet as
  $ ohow --print mydoc.wiki > out.html
#+END_SRC
#+end_listing

**** Les Liens
Le cas des liens est complexe, déjà car il existe deux manières d'écrire un lien
en wikicréole étendu :
- avec la syntaxe wikicréole standard, par exemple
  {{{wikilink(wiki(name):page)}}} ou encore {{{wikilink(site:address)}}}\(\)[fn:12], et,
- avec les extensions Ocsigen ~a_manual~, ~a_api~, ~a_img~, etc.

Le problème est que ces deux types de liens sont traités dans deux parties
bien distinctes du compilateur.


#+NAME: setup-org-latex-src-block-dispatch-export
#+BEGIN_SRC elisp :exports none :results silent
  ;; (unless (fboundp '-old--org-latex-src-block)
  ;;   (fset '-old--org-latex-src-block (symbol-function 'org-latex-src-block)))
  ;; (defun org-latex-src-block (src-block _contents info)
  ;;   (let* ((attr (org-export-read-attribute :attr_latex src-block))
  ;;          (inline-p (plist-get :inline attr)))
  ;;     (error "inline-p %S attr %S info %S" inline-p attr info)
  ;;     (if inline-p
  ;;         (progn
  ;;           (push '(ocaml "ocamlinline") org-latex-custom-lang-environments)
  ;;           (-old--org-latex-src-block src-block _contents info)
  ;;           (pop org-latex-custom-lang-environments))
  ;;       (-old--org-latex-src-block src-block _contents info))))

  ;; (push '(ocaml "ocamlinline") org-latex-custom-lang-environments)
#+END_SRC

Pour la syntaxe standard {{{wikilink(link)}}}, la déduction de l'URL (c'est-à-dire
le chemin vers la page de destination) est faite lors de la génération des éléments
{{{html}}}. Concrètement, il existe une fonction
~href_of_link : string -> 'a Html5.elt list -> [> 'a Html_types.a ] Html5.elt~
qui, pour chaque lien (syntaxe standard) du wiki, associe l'élément ~<a/>~ correspondant,
c'est-à-dire la balise {{{html}}} utilisée pour créer un lien sur une page web
(dont le type avec ~Tyxml~ est ~[> 'a Html_types.a ] Html5.elt~).
Cette fonction est appelée par le compilateur /directement/ et est au coeur du
processus de compilation.

#+NAME: lst:example-href_of_link
#+CAPTION: Compilation du lien {{{wikilink(wiki(eliom):intro|goto intro)}}}.
#+begin_listing
#+BEGIN_SRC ocaml
  (* Pour le lien [[wiki(eliom):intro|goto intro]], la fonction [href_of_link] est appelée ainsi : *)
  href_of_link "wiki(eliom):intro" [Tyxml.Html.pcdata "goto intro"]
  (* Elle retourne alors un élément Tyxml créé comme suit : *)
  Tyxml.Html.(a ~a:[a_href "../../the/path/to/eliom/intro"] [pcdata "goto intro"])
  (* Cet élément correspond à la construction HTML suivante : *)
  (* <a href="../../the/path/to/eliom/intro">goto intro</a> *)
#+END_SRC
#+end_listing

#+begin_ex
Le listing [[lst:example-href_of_link]] montre en quoi la fonction ~href_of_link~
est responsable d'une déduction de liens correcte et aussi, plus généralement,
comment l'on peut générer des morceaux d'{{{html}}} en {{{ocaml}}} à l'aide
de la bibliothèque Tyxml (appartennant au projet Ocsigen).
#+end_ex

En revanche, pour les extensions, le fonctionnement est différent et un exemple
d'implantation d'une extension simple est donné par le listing [[lst:ext-ex]].
Les extensions qui ont fonction de lien dans la documentation du projet Ocsigen
sont les suivantes :
- ~a_manual~ qui décrit un lien vers un chapitre[fn:13] du manuel,
- ~a_api~, ~a_api_type~, ~a_api_code~ qui décrivent un lien vers la page de
  documentation d'un symbole d'une {{{api}}}\(\)[fn:14],
- ~a_img~ qui insère une image (balise {{{html}}} ~<img/>~) à l'endroit donné, et,
- ~a_file~ qui décrit un lien vers un fichier quelconque à télécharger, stocké au
  même endroit que le site généré (GitHub Pages dans le cas du projet Ocsigen).

Le tableau [[tab:link-exts]] décrit les attributs que ces extensions doivent supporter.
Le listing [[lst:link-exts-ex]] donne un exemple d'utilisation de ces extensions.

#+NAME: tab:link-exts
#+CAPTION: Description des attributs des extensions Ocsigen ayant fonction de lien.
#+begin_table
#+LATEX: \small
|--------------+-------------------------------------+-----------------------------------------+-------------------|
| Attribut     | Extensions concernées               | Description                             | Valeur par défaut |
|--------------+-------------------------------------+-----------------------------------------+-------------------|
| ~project~    | Tous sauf ~a_img~ et ~a_file~       | Le projet contenant la page             | Projet courant    |
| ~chapter~    | ~a_manual~                          | Le chapitre du manuel contenant la page | Aucun             |
| ~subproject~ | ~a_api~, ~a_api_type~, ~a_api_code~ | Le sous-projet contenant le symbole     | Aucun             |
| ~text~       | ~a_api~, ~a_api_type~, ~a_api_code~ | Texte du lien produit                   | Le symbole        |
| ~version~    | Tous sauf ~a_img~ et ~a_file~       | La version du projet contenant la page  | Version courante  |
| ~fragment~   | Tous sauf ~a_img~ et ~a_file~       | /Fragment/ (ou /ancre/) {{{html}}}      | Aucune            |
| ~src~        | ~a_img~, ~a_file~                   | Le chemin vers la ressource à lier      | /Requis/          |
|--------------+-------------------------------------+-----------------------------------------+-------------------|
#+end_table

#+NAME: lst:link-exts-ex
#+CAPTION: Exemple d'utilisation des liens sous forme d'extensions Ocsigen.
#+begin_listing
#+BEGIN_SRC wiki
  <<a_manual project="eliom" chapter="intro" | introduction of Eliom's docs>>
  <<a_manual project="eliom" subproject="ppx" | index.html of the PPX subproject of Eliom>>
  <<a_manual version="2.1" | index.html of the current project version 2.1>>
  <<a_api project="eliom" subproject="server" text="some text" | type Eliom_client.server_function>>
  <<a_api_type project="eliom" subproject="server" | type Eliom_client.server_function>>
  <<a_file src="mindmap.pdf">>
  <<a_img src="logo.png">>
#+END_SRC
#+end_listing

Cependant, il existe une différence fondamentale entre les liens syntaxiques
{{{wikilink(link)}}} et ces extensions : ces premiers indiquent /où/ trouver
la ressource liée alors que les extensions indiquent seulement /quelle/ ressource
lier /sans préciser sa localisation/. Autrement dit, {{{wikilink(other/page|text)}}}
peut être lu comme "dans le dossier de la page courante, aller dans le dossier
~other~, s'y trouve une page ~page~ : c'est elle qu'il faut lier" et
{{{wikiext(a\_manual project="P" chapter="C"|text)}}} comme "/trouver/ la page ~C~
/quelque part/ dans le projet ~P~ (un dossier, lui aussi /quelque part/) et créer
un lien vers celle-ci".

Dans le cas des extensions, le logiciel ne pouvant pas "deviner" où se situe la
ressource demandée, il est necésaire /d'imposer une architecture/ que l'utilisateur
de celles-ci doit /respecter/ afin que leur fonctionnement soit garanti.
Concrètement, l'architecture ci-dessous a été choisie, autant pour des raisons
techniques imposées par GitHub Pages que pour rendre la compatibilité
des URLs plus simple à maintenir.

- Tous les projets (dossiers) concernés par les extensions se situent dans le
  même dossier (ils sont tous au même niveau). Dans la terminologie employée
  par =ohow=, c'est le *projects directory*.
- À la racine de chaque projet se trouve les dossiers de versions, dont le nom
  correspond à la version concernée, par exemple =1.1=, =2.0.3=, etc. Plus
  formellement, leur nomenclature est décrite par /l'expression régulière/
  ~([0-9](.[0-9])+|dev)~, où ~dev~ correspond à la documentation de la version
  en développement. Dans la terminologie employée par =ohow=, c'est le
  *versions directory*.
- Dans ce versions directory doit se trouver un lien symbolique nommé
  ~latest~ qui pointe vers le dossier de la version considérée comme "la
  plus récente".
- À la racine de chaque version doit se trouver un lien symbolique nommé
  ~index.html~[fn:15] qui pointe vers la page d'introduction ou de présentation
  du projet (pour la version en question).
- Dans le versions directory doit également se trouver un lien symbolique
  nommé aussi ~index.html~ qui pointe vers la page d'accueil du projet par
  défaut lorsque la version n'est pas spécifiée. ~latest/index.html~ est
  une bonne valeur pour ce lien.
- Pour rappel, =ohow= compile les wikis un par un : il est donc possible de
  connaître la version de la documentation à laquelle le wiki appartient.
  Dans la terminologie employée par =ohow=, c'est le *root directory*.
- Dans l'idée de rester le plus générique possible, =ohow= accepte les options
  en ligne de commande suivantes :
  - ~--root~ désigne le /root directory/,
  - ~--manual~ désigne le dossier contenant les wikis du manuel (~a_manual~),
  - ~--api~ désigne le dossier contenant les wikis de l'{{{api}}} (~a_api*~[fn:16]),
  - ~--images~ désigne le dossier contenant les images (~a_img~), et,
  - ~--assets~ désigne le dossier contenant les fichiers (~a_file~).
  #+begin_note
  Il n'est pas nécéssaire que les valeurs de ces options correspondent à des
  dossiers réels /au moment de la compilation/. En effet, ces valeur sont seulement
  utilisées pour déduire les liens relatifs produits par les extensions ~a_*~.
  Naturellement, ces dossiers devront exister une fois le site déployé afin de ne
  pas avoir de liens morts.
  #+end_note

#+begin_ex
Voici une invocation possible de ~ohow~ :
#+BEGIN_SRC shellinline
$ ohow --root eliom/4.0.1 \
       --manual eliom/4.0.1/manual/src \
       --api eliom/4.0.1/api \
       --images eliom/4.0.1/manual/src/illustrations \
       --assets eliom/4.0.1/manual/src/illustrations
#+END_SRC
#+end_ex

Avec ces informations et contraintes supplémentaires, les extensions ~a_*~ peuvent
déduire correctement chaque lien à générer. Si une de ces extensions est utilisée
dans un wiki mais que les options correspondantes ne sont pas renseignées (par exemple
si ~a_manual~ est rencontrée mais que ~--manual~ ou ~--root~ n'est pas renseigné), alors
=ohow= devra s'arrêter sur une erreur.

**** L'extension {{{wikiext(doctree)}}}
Cette extension affiche le menu de la figure [[fig:doctree]]. C'est l'une des extensions
les plus complexes à gérer pour =ohow= même si son fonctionnement reste relativement
simple. Cette extension cherche des fichiers nommés ~menu.wiki~ dans le manuel et dans
l'{{{api}}} (sous-projets inclus), les compile, et les inclus dans un élément {{{html}}}
~<nav/>~ (élément ayant pour sémantique la navigation à travers le site). Le listing
[[lst:menu-wiki-example]] montre le fichier ~menu.wiki~ du manuel du projet Eliom.

Il faut donc maintenir cette extension en état de marche, sans toucher aux fichiers
~menu.wiki~.
Cette extension n'accepte pas d'attributs ni de contenu.

#+NAME: fig:doctree
#+CAPTION: Menu affiché par l'extension {{{wikiext(doctree)}}}.
#+ATTR_LATEX: :height .35\paperheight
[[./doctree.png]]

#+NAME: lst:menu-wiki-example
#+CAPTION: Fichier ~menu.wiki~ du manuel du projet Eliom.
#+begin_listing
#+INCLUDE: "eliom-menu.wiki" src wiki
#+end_listing

**** L'extension {{{wikiext(docversion)}}}
Cette extension affiche la liste déroulante de la figure [[fig:docversion]]. Elle permet
de choisir la version de la documentation à afficher. Lorsque l'utilisateur choisit
une version $X$ dans la liste, il doit être redirigé vers la page ~X/index.html~.
#+begin_ex
Par exemple, si l'utilisateur est sur la page https://ocsigen.org/eliom/6.3/manual/intro.html
et qu'il sélectionne la version =2.1= dans la liste déroulante, il doit être redirigé
vers https://ocsigen.org/eliom/2.1/index.html.
#+end_ex

Il faut donc maintenir cette extension en état de marche.
Cette extension n'accepte pas d'attributs ni de contenu.

#+NAME: fig:docversion
#+CAPTION: Aperçu de l'extension {{{wikiext(docversion)}}}.
#+ATTR_LATEX: :height .25\paperheight
[[./docversion.png]]

**** L'extension {{{wikiext(googlesearch)}}}
Cette extension affiche une barre de recherche accompagnée d'un bouton permettant
d'effectuer une recherche Google sur les pages du site https://ocsigen.org uniquement.
Cela permet de naviguer dans la documentation plus rapidement.

Cependant cette barre de recherche n'étant pas stylisée, elle jure avec le reste
du site et il a été décidé de la masquer avec le code {{{css}}} ~display: none~
(elle se situe normalement entre le {{{wikiext(docversion)}}} et le
{{{wikiext(doctree)}}}).

Il m'a donc été demandé de la styliser et de la placer à un endroit plus approprié.
Cette extension n'accepte pas d'attributs ni de contenu.

**** L'extension {{{wikiext(client-server-switch)}}}
Certaines parties de l'{{{api}}} (modules, types, etc.) de certains projets extistent
en deux versions : une version /client/ et une version /serveur/[fn:17]. C'est par exemple
le cas pour le module ~Eliom_lib~ du projet Eliom.

#+LaTeX: \begin{ffbox}[note]{Résumé}
Grâce au outils du projet Ocsigen, il est possible d'annoter quel morceau de code
est du code client, du code serveur, ou les deux. C'est ensuite à la compilation
que la séparation se fait et que les deux binaires (un pour le client, un pour
le serveur) sont générés. Certains modules (comme ~Eliom_lib~) existent donc
en deux versions (puisque les fonctionnalités qu'ils offrent ont une utilité des
deux côtés).
#+LaTeX: \end{ffbox}

C'est pourquoi, sur la page de documentation de ces modules, l'on trouve le
composant illustré par la figure [[fig:csw-demo]] et produit par l'extension
{{{wikiext(client-server-switch)}}}. Cependant celui-ci est considéré
comme peu intuitif, mal stylisé et mal positionné (entre le
{{{wikiext(docversion)}}} et le {{{wikiext(doctree)}}}).

Il m'a été demandé de le remplacer, en le rendant plus ésthétique, en améliorant
sa position dans la page et tout en conservant sa fonction.
Cette extension n'accepte pas d'attributs ni de contenu.

#+NAME: fig:csw-demo
#+CAPTION: L'extension {{{wikiext(client-server-switch)}}} telle qu'elle était à mon arrivée.
[[./csw-demo.png]]

**** L'extension {{{wikiext(content)}}}
Cette extension ne se situe pas dans les wikis contenant la documentation
mais dans des fichiers wiki spéciaux : les /templates/. Dans ces derniers,
elle permet de spécifier l'endroit où insérer le contenu. Plus de détails
sur ce mécanisme et sur cette extension sont exposés dans section [[sec:cdc-wit]],
où est détaillé le cahier des charges d'un outil auxiliaire de =ohow= dédié
à la gestion de ces templates.

Puisque ce n'est donc pas la responsabilité de =ohow= que de gérer les
templates, l'outil n'a donc pas à gérer cette extension.

#+LaTeX: \begin{ffbox}{En bref}
Un template est un fichier wikicréole classique contenant une occurence
de l'extension {{{wikiext(content)}}}. Lorsqu'un wiki classique est
compilé, son contenu est "copié-collé à la place" de cette extension
dans le template, et le tout est ensuite compilé vers de l'{{{html}}}.

Cela a pour effet de "rajouter" du code wikicréole avant et après le
contenu de chaque wiki, notament pour des questions de mise en page.
C'est aussi dans le template que l'on spécifie l'agencement de la page ---
la position relative du menu par rapport au contenu.

Ce mécanisme permet de ne pas avoir à recopier (et maintenir) les parties
communes à chaque page de la documentation.
#+LaTeX: \end{ffbox}

**** Les autres extensions
Il n'est pas nécéssaire de réécrire ni même modifier les autres extensions
du tableau [[tab:ext-to-support]].

**** Gestion des liens vers les scripts et les feuilles de style
Le site https://ocsigen.org utilise des feuilles de style en cascade ({{{css}}})
ainsi qu'un certain nombre de scripts {{{lang(JavaScript)}}} pour, entre autres,
colorer les morceaux de code {{{ocaml}}} que l'on peut trouver dans la documentation.

Le lien vers ces ressources est codé en dur dans =how= (/"hardcoding"/), ce qui constitue
une /mauvaise pratique de programmation/ puisqu'elle n'est ni générique, ni portable,
ni maintenable aisément.

Il me faut donc trouver une solution pour corriger cela. Coder une extension supplémentaire
ayant ce rôle qui serait placée dans le template de chaque projet est une solution
satisfaisante qui fonctionne.

**** L'insertion conditionnelle de contenu
Les figures [[fig:ocsigen.org]] et [[fig:ocsigen.org-lwt]] donnent un aperçu global de ce
à quoi ressemble (et doit continuer à ressembler) le site https://ocsigen.org,
avec deux wikis (contenus) différents. L'on y distingue les différents composants
de la page :
- le menu ({{{wikiext(doctree)}}}) de la documentation du projet,
- l'en-tête de la page (balise {{{html}}} ~<header/>~) avec le logo et les liens
  vers les principaux projets, identique pour toutes les pages du site,
- le menu latéral rétractable (extension {{{wikiext(drawer)}}}), aussi identique
  pour toutes les pages du site[fn:18], et enfin,
- la partie centrale, où le contenu du wiki consulté est affiché.

À l'exception du /contenu/ de la partie centrale, tout le reste est quasiment
identique, /à quelques détails près/. Par exemple dans l'en-tête et le menu latéral,
le projet courant est souligné en bleu (coloré en orange dans le menu). Cet effet est
accompli en ajoutant une classe {{{css}}} --- ~mainmenu-current~ et
~drawermainmenu-current~ --- au lien vers le projet courant dans ces menus.

#+begin_ex
Dans le fichier ~template.wiki~ du projet Eliom, l'on a[fn:19] :
#+BEGIN_SRC wikinline
*@@class="mainmenu-current"@@[[wiki("eliom"):|Eliom]]
*[[wiki("js_of_ocaml"):|Js_of_ocaml]]
*[[wiki("lwt"):|Lwt]]

[...]

*@@class="drawermainmenu-current drawermainmenu-project"@@[[wiki("eliom"):|Eliom]]
*@@class="drawermainmenu-project"@@[[wiki("js_of_ocaml"):|Js_of_ocaml]]
*@@class="drawermainmenu-project"@@[[wiki("ocsigenserver"):|Server]]
*@@class="drawermainmenu-project"@@[[wiki("lwt"):|Lwt]]
#+END_SRC
alors que dans le fichier ~template.wiki~ du projet Lwt, l'on a le code suivant,
/presque identique/ à l'exception de la position des classes ~mainmenu-current~ et
~drawermainmenu-current~ :
#+BEGIN_SRC wikinline
*[[wiki("eliom"):|Eliom]]
*[[wiki("js_of_ocaml"):|Js_of_ocaml]]
*@@class="mainmenu-current"@@[[wiki("lwt"):|Lwt]]

[...]

*@@class="drawermainmenu-project"@@[[wiki("eliom"):|Eliom]]
*@@class="drawermainmenu-project"@@[[wiki("js_of_ocaml"):|Js_of_ocaml]]
*@@class="drawermainmenu-project"@@[[wiki("ocsigenserver"):|Server]]
*@@class="drawermainmenu-current drawermainmenu-project"@@[[wiki("lwt"):|Lwt]]
#+END_SRC
#+end_ex

La majorité du code est donc /dupliquée/ dans les différents fichiers ~template.wiki~
de tous les projets et les seules différences se situent au niveau de /détails/ comme
les classes {{{css}}} évoquées précedemment. La duplication de code étant une mauvaise
pratique de programmation, il m'a été demandé de trouver une solution afin de n'avoir
/qu'un seul fichier ~template.wiki~ pour tous les projets/ et de trouver un moyen
d'ajouter cette classe automatiquement lors de la compilation.

Ceci peut être accompli en implantant une extension ~when-project~, qui n'insère
son contenu que si le wiki en train d'être compilé appartient au projet spécifié.

#+NAME: fig:ocsigen.org
#+CAPTION: Aperçu du site https://ocsigen.org (page d'accueil du projet Eliom).
[[./ocsigen.org.png]]

#+NAME: fig:ocsigen.org-lwt
#+CAPTION: Aperçu du site https://ocsigen.org (page d'accueil du projet Lwt).
[[./ocsigen.org-lwt.png]]

**** Documentation
Que =ohow= soit destiné à un usage interne uniquement ou à être publié, il est
impératif de le documenter. De plus, étant un outil de gestion de documentation,
il est necéssaire que sa documentation soit parfaitement claire, précise et soignée.
Cela permet aussi de démontrer l'efficacité de l'outil s'il est capable générer
sa propre documentation.

Il faut donc écrire la documentation de =ohow= en wikicréole étendu et la compiler
avec =ohow=.

*** L'outil auxiliaire de =ohow= : wiki_in_template <<sec:cdc-wit>>
Comme expliqué dans le paragraphe sur l'extension {{{wikiext(content)}}} de la section
[[sec:cdc-ohow]], il doit être possible d'inclure le contenu de chaque wiki dans un fichier
spécial : le /template/ (ou /patron/). Ces fichiers sont différents dans le sens où ils
contiennent une (ou plusieurs) occurence(s) de cette extension.

Cependant, toujours afin de rester dans l'idée que chaque programme ne doit faire
qu'une seule chose[fn:9], il a été décidé que la fonction d'insetion de /contenu/
dans un template doit être le but d'un outil distinct. En effet, =ohow= est un
/compilateur wikicréole \rightarrow {{{html}}}/ : celui-ci prend donc en entrée "du code
wikicréole" et sort "du code {{{html}}} équivalent", alors que la fonction
qui /"inline"/ (insère) un wiki dans son template est une fonction qui prend en
entrée "deux codes wikicréole" et sort "un code wikicréole (le second dans le
premier)".

Ce sont donc deux fonctionalités /complètement orthogonales/ (c'est-à-dire
que l'on peut très bien utiliser l'une sans l'autre) pour deux outils
/bien distincts/. L'outil donc chargé /d'inline/ un wiki dans un template
est donc /wiki_in_template/[fn:20], abrégé =wit=.

**** Objectifs
- =wit= doit être un outil en ligne de commande Unix.
- Il doit permettre d'insérer le contenu /d'un/ wiki dans /un/ template.
- Aucun de ces deux fichiers ne doit être modifié.
- Le contenu du wiki est inséré à la place de la /première balise/ {{{wikiext(content)}}}.
- Cette extension n'accepte pas d'attributs ni de contenu.

**** Interface
- La commande =wit= prend en seul argument (requis) un /fichier/ : le template.
- Elle lit le contenu du wiki à insérer sur /l'entrée standard/ ~stdin~.
- Le résultat de l'insertion est envoyé vers /la sortie standard/ ~stdout~.

-----

Cette interface simple faisant une utilisation massive des flux d'entrée et de
sortie standard permet à =wit= d'être /extrêmement composable/ et ainsi permettre
l'utilisation de /plusieurs templates/ pouvant contenir chacun /plusieurs balises/
{{{wikiext(content)}}}.

En effet, pour deux templates ~t1.wiki~ et ~t2.wiki~ (contenant chacun une seule
balise {{{wikiext(content)}}}) et un wiki ~content.wiki~, insérer ce dernier dans
le premier template puis dans le second revient à exécuter le code shell du listing
[[lst:wiki-t1-t2]]. Cette commande produit le résultat escompté sur ~stdout~ (que l'on
peut éventuellement rediriger facilemnt vers un fichier de sortie).

#+NAME: lst:wiki-t1-t2
#+CAPTION: Commande d'insertion d'un wiki dans deux templates.
#+begin_listing
#+BEGIN_SRC shell
  cat content.wiki | wit t1.wiki | wit t2.wiki
#+END_SRC
#+end_listing

C'est avec la même simplicité que l'on peut gérer le cas de l'insertion de
/deux contenus/ ~c1.wiki~ et ~c2.wiki~ dans /un seul/ template ~template.wiki~
(contenant au moins deux balises {{{wikiext(content)}}}), comme l'illustre le
listing [[lst:c1-c2-template]][fn:21].

#+NAME: lst:c1-c2-template
#+CAPTION: Commande d'insertion de deux contenus dans un seul template.
#+begin_listing
#+BEGIN_SRC shell
  wit <(wit template.wiki < c1.wiki) < c2.wiki
#+END_SRC
#+end_listing

Enfin, les deux cas traités précédemment fonctionnent une fois généralisés à plus
de deux templates et deux wikis, et peuvent être combinés, puisque la sortie
de =wit= peut à la fois avoir fonction de template que de contenu.

#+begin_note
Il est important de comprendre que cette puissance provient de la combinaison de
la simplicité de la conception de =wit=, de son adéquation avec la philosophie
d'Unix et de la puissance du langage shell.
#+end_note

**** Exemples
- Le listing [[lst:wit-ex-2t1c]] montre le résultat de l'insertion d'un wiki dans
  deux templates.
- Le listing [[lst:wit-ex-1t2c]] montre le résultat de l'insertion de deux wikis dans
  un seul template.
# TODO
# - Le listing [[lst:wit-ex-2t2c]] montre le résultat de l'insertion de plusieurs wikis dans
#   un plusieurs templates.


#+NAME: lst:wit-ex-2t1c
#+CAPTION: Exemple d'insertion d'un wiki dans deux templates.
#+begin_listing
#+INCLUDE: "wit-ex-2t1c.sh" src shell
#+end_listing

#+NAME: lst:wit-ex-1t2c
#+CAPTION: Exemple d'insertion de deux wikis dans un template.
#+begin_listing
#+INCLUDE: "wit-ex-1t2c.sh" src shell
#+end_listing

La figure [[fig:ohow-pipeline]] schématise la /pipeline/ (chaîne de processus) mise
en place pour compiler un contenu wikicréole avec ses différents templates (encore
une fois, leur nombre n'est évidemment pas limité à 2).

#+NAME: fig:ohow-pipeline
#+CAPTION: /Pipeline/ de compilation d'un wiki avec templates.
#+begin_figure
#+BEGIN_CENTER
#+INCLUDE: "ohow-pipeline.tex" export latex
#+END_CENTER
#+end_figure

*** doc_of_project<<sec:cdc-dop>>
Si ~ohow~ permet bien de compiler un fichier wikicréole en {{{html}}}, il est,
par design, incapable de générer la documentation d'un projet en entier. Il est
donc nécessaire d'écrire un outil supplémentaire, formant une couche d'abstraction
autour de one_html_of_wiki, chargé de cela. Nous avons nommé cet outil /dop/,
pour "doc_of_project".

~dop~ n'apporte pas de nouvelles fonctionnalités mais permet d'utiliser ~ohow~
plus simplement. Cet outil permet d'améliorer /l'ergonomie/ et le /confort d'utilisation/.

**** Interface
- Outil en ligne de commande.
- Accepte un /fichier de configuration/, au format JSON, supportant les
  paramètres décrits par le tableau [[tab:conf-keys]].
- En particulier, ~dop~ doit être capable de /déduire/, en analysant la
  structure du projet, un maximum de paramètres de configuration.
- Accepte les options en ligne de commandes décrites par le tableau [[tab:dop-opts]].

#+begin_note
Pour des raison techniques, le format JSON requiert qu'un outil externe, ~jq~,
soit installé. Comme il n'est pas toujours possible de l'installer et afin
d'assurer une portabilité maximale, ~dop~ supporte aussi un autre format pour le
fichier de configuration, nommé =plain=. Voir la documentation correspondante,
disponible à l'adresse suivante: [[https://ocsigen.org/html_of_wiki/2.0/manual/intro#conf]].
#+end_note

**** Exemples
Le listing [[lst:how.json]] donne un exemple de fichier de configuration. Supposons
que ce fichier est nommé ~how.json~ et qu'il se situe au même niveau qu'un
dossier ~2.0~, contenant le manuel et l'{{{api}}} de la version correspondante
du projet ~html_of_wiki~ (cf. ~"project"~). Pour le compiler dans son
intégralité, l'on invoque ~dop~ de la manière suivante:
#+BEGIN_SRC shellinline
$ dop -r 2.0-compiled -t json -c how.json -viulf 2.0/
#+END_SRC

#+NAME: tab:conf-keys
#+CAPTION: Entrées supportées par le fichier de configuration géré par ~dop~.
#+begin_table
|----------------------+----------------+---------------------------------+
| Entrée JSON          | Type           | Option de ~ohow~ correspondante |
|----------------------+----------------+---------------------------------+
| =project=            | /string/       | ~--project~                     |
| =manual=             | /string/       | ~--manual~                      |
| =api=                | /string/       | ~--api~                         |
| =client=             | /string/       | ---                             |
| =server=             | /string/       | ---                             |
| =assets=             | /string/       | ~--assets~                      |
| =images=             | /string/       | ~--images~                      |
| =csw=                | /boolean/      | ~--csw~                         |
| =menu=               | /boolean/      | ~--doctree~                     |
| =templates=          | /string array/ | ~--template~                    |
| =default_subproject= | /string/       | ~--default-subproject~          |
|----------------------+----------------+---------------------------------+
#+end_table

#+NAME: tab:dop-opts
#+CAPTION: Options de ligne de commande que doit supporter ~dop~.
#+begin_table
|--------------+--------+-------------------+-------------------+-------------------------------------------|
| Nom(anglais) | Option | Valeur            | Valeur par défaut | Description                               |
|--------------+--------+-------------------+-------------------+-------------------------------------------|
| Config       | ~-c~   | Fichier           | ---               | Fichier de configuration                  |
| Config type  | ~-t~   | ~json~ ou ~plain~ | ~plain~           | Format de ce fichier                      |
| Clean        | ~-k~   | Présence          | ---               | Conserver les fichiers ~*.wiki~           |
| Inferred     | ~-i~   | Présence          | ---               | Afficher la configuration déduite         |
| Used         | ~-u~   | Présence          | ---               | Afficher la configuration utilisée        |
| No run       | ~-n~   | Présence          | ---               | Ne pas compiler (/dry run/)               |
| Root dir     | ~-r~   | Nom               | ~_dop~            | /Root directory/                          |
| Force        | ~-f~   | Présence          | ---               | Réécrit ce dossier s'il existe            |
| Local        | ~-l~   | Présence          | ---               | Liens locaux (cf. ~--local~)              |
| Docversion   | ~-d~   | Fichier           | ---               | Fichier ~docversion~ (cf. ~--docversion~) |
| Verbose      | ~-v~   | Présence          | ---               | Mode verbeux                              |
| Help         | ~-h~   | Présence          | ---               | Affiche l'aide et termine                 |
|--------------+--------+-------------------+-------------------+-------------------------------------------|
#+end_table

#+NAME: lst:how.json
#+CAPTION: Exemple de fichier de configuration de ~dop~.
#+begin_listing
#+BEGIN_SRC javascript
  {
      "project": "html_of_wiki",
      "manual": "man",
      "api": "api",
      "assets": "files",
      "images": "files/images",
      "csw": false,
      "menu": true,
      "templates": ["template1.wiki", "template2.wiki"]
  }
#+END_SRC
#+end_listing

*** quickdop
Si ~dop~ permet de simplifier considérablement l'utilisation de ~ohow~, il reste
néanmoins un paramètre à fournir manuellement et qui pourrait être automatisé :
~--docversion~. Ce paramètre, comme expliqué précédemment, prend comme valeur le
chemin vers un fichier contenant les noms des versions de la documentation à
compiler, une par ligne.

C'est l'objectif de ~quickdop~ ("quick-doc_of_project"). Cet outil en ligne de
commande s'invoque de la manière suivante :
#+BEGIN_SRC shellinline
$ quickdop [-f] PROJECT OUTDIR [DOP_OPTIONS]
#+END_SRC

- ~PROJECT~ :: le dossier contenant les versions à compiler
- ~OUTDIR~ :: le dossier devant contenir le résultat de la compilation (utiliser
              l'option ~-f~ pour autoriser la réécriture)
- ~DOP_OPTIONS~ :: les options à donner à ~dop~, à l'exception de ~-d~ et ~-r~

Lorsque ~quickdop~ est ainsi invoqué, l'outil va se charger d'analyser le
contenu de ~PROJECT~ et appeler ~dop~ pour tous les dossier dont le nom est
décrit par l'expression régulière ~([0-9.]+){,3}|dev~. Il se charge également
de générer le fichier passé à ~--docversion~ avec le nom des versions qu'il
compile, ainsi que de les ordonner (versions par ordre numérique et ~dev~, si
elle existe, à la fin).

*** Gestion de la documentation du project Ocsigen
Comme indiqué dans la section [[sec:ohow-but-grl]], il m'a été demandé de régler deux
problèmes distincts :
- celui de remplacer =how= par un outil plus souple et,
- /simplifier/ et /automatiser/ la gestion de la documentation des projets.

**** Simplification
- fusion de tous les fichiers ~template.wiki~ (voir la section [[sec:cdc-ohow]]),
- suppression du dépôt =ocsigen.org-data= (voir la section [[sec:ohow-but-grl]]), et,
- gestion des liens symboliques faisant office de redirections[fn:22] automatique.

**** Automatisation
Il m'a également été demandé de mettre en place un /job d'intégration continue/
avec {{{travis}}}. Ce job doit être composé des /phases/ suivantes :
- /Build/ :: il faut tout d'abord compiler les wikis :
  - insérer tous les wikis dans leur(s) template(s) (dans le bon ordre),
  - compiler toutes les versions du projet,
  - lancer un /outil de détection de liens morts/ sur les pages {{{html}}}
    ainsi générées.
- /Post-build tests/ :: après la phase précédente, il faut vérifier que :
  - toutes les compilations ont terminées avec succès (pas d'erreur de syntaxe,
    d'utilisation de fonctionalités dépréciées, etc.),
  - l'outil de détection de liens morts n'en a trouvé aucun.
- /Deploy/ :: enfin, si les tests post-compilation sont tous passés, il faut
              déployer le site généré sur GitHub Pages, c'est-à-dire en poussant
              (~git push~) les fichiers {{{html}}} sur la branche ~gh-pages~ du
              projet[fn:22].

* Annexes
** Le Wikicréole<<sec:anx-wikicreole>>
Le wikicréole est un format de mise en forme de texte de la famille des formats
wiki. Sa dernière version en date est la =1.0=.

*** Standard
La figure [[fig:creole-cheatsheet]] résume le standard wikicréole. Noter que cette
image ommet de parler du carctère d'échappement ~~~ qui permet de ne pas interpréter
l'élément qu'il précède.

#+NAME: fig:creole-cheatsheet
#+CAPTION: Résumé du standard wikicréole =1.0=
#+ATTR_LATEX: :height .35\paperheight
[[./creole_cheat_sheet.jpg]]

#+begin_note
Dans le wikicréole supporté par le projet Ocsigen, les titres de premier niveau
sont préfixés par un seul caractère ~=~. Un tel titre s'écrit alors
~= Premier niveau (h1)~ et un titre de niveau inférieur s'écrit
~== Second niveau (h2)~, ~=== Troisième niveau (h3)~, etc.
#+end_note

*** Additions du projet Ocsigen
**** Liens
Le tableau [[tab:links]] liste les syntaxes de liens ajoutées et le tableau
[[tab:abbr]] les abréviations disponibles.

#+begin_note
Une ancienne syntaxe dont BeSport souhaitait se débarasser permettait d'identifier
un wiki avec un identifiant unique : {{{wikilink(wiki(id):page)}}}. Cette syntaxe
étant assez obscure pour le lecteur (~wiki(12)~ est moins explicite que ~wiki("eliom")~),
il a été décidé qu'elle ne serait plus maintenue.
#+end_note

#+NAME: tab:links
#+CAPTION: Syntaxes de liens ajoutées par le projet Ocsigen.
#+begin_table
|-----------------------------------+-----------------------------------------------|
| Syntaxe                           | Description                                   |
|-----------------------------------+-----------------------------------------------|
| {{{wikilink(wiki("name"):page)}}} | Lien vers la ~page~ du wiki ~name~.           |
| {{{wikilink(wiki:page)}}}         | Lien vers la ~page~ du wiki courant.          |
| {{{wikilink(site:href)}}}         | Lien relatif à la racine du site.             |
| {{{wikilink(href:path)}}}         | Valeur de l'attibut ~href~ du lien explicite. |
|-----------------------------------+-----------------------------------------------|
#+end_table

#+NAME: tab:abbr
#+CAPTION: Syntaxes d'abréviations de liens ajoutées par le projet Ocsigen.
#+begin_table
|---------------------------+------------------------------+-----------------------------------------------|
| Abréviation              | Équivalence                  | Description                                   |
|---------------------------+------------------------------+-----------------------------------------------|
| {{{wikilink()}}}          | {{{wikilink(href:.)}}}       | Page courante.                                |
| {{{wikilink(\#anchor)}}}  | {{{wikilink(href:\#anchor)}}} | Page courante (avec ancre).                   |
| {{{wikilink(/path)}}}     | {{{wikilink(site:path)}}}    | Lien relatif à la racine du site.             |
| {{{wikilink(path)}}}      | {{{wikilink(href:path)}}}    | Lien relatif.                                 |
|---------------------------+------------------------------+-----------------------------------------------|
#+end_table

**** Décorations
Le tableau [[tab:d&co]] liste les décorations ajoutées par le projet Ocsigen.
Est aussi ajouté un autre type de listes : les /listes de définitions/.
Le code wikicréole du listing [[lst:wiki-def-list]] peut ainsi générer la liste
de définitions suivante :

#+LaTeX: \begin{exampleffbox}{}\footnotesize
- Ben Kenobi :: Humain --- Jedi
- Général Grievous :: Robot --- Sith
- Anakin Skywalker/Dark Vador :: C'est compliqué... --- ...oh oui, très compliqué...
#+LaTeX: \end{exampleffbox}

#+NAME: lst:wiki-def-list
#+CAPTION: Une liste de définitions en wikicréole (non-standard).
#+begin_listing
#+BEGIN_SRC wiki
  ;Ben Kenobi
  :Humain --- Jedi
  ;Général Grievous
  :Robot --- Sith
  ;Anakin Skywalker/Dark Vador
  :C'est compliqué... --- ...oh oui, très compliqué...
#+END_SRC
#+end_listing

#+NAME: tab:d&co
#+CAPTION: Décorations ajoutées au wikicréole par le projet Ocsigen.
#+begin_table
|--------------------------+----------------------+--------------------|
| Syntaxe                  | Description          | Exemple            |
|--------------------------+----------------------+--------------------|
| ~--~                     | /en-dash/            | --                 |
| \code{-\relax -\relax -} | /em-dash/            | ---                |
| ~##text##~               | Police à chasse fixe | =text=             |
| ~^^super^^~              | Exposant             | \({}^{\text{super}}\) |
| ~,,sub,,~                | Indice               | \({}_{\text{sub}}\)   |
| ~__text__~               | Soulignement         | _text_             |
| ~/-text-/~               | Barrage              | +text+             |
|--------------------------+----------------------+--------------------|
#+end_table

**** Extensions
Comme expliqué dans la section [[sec:cdc-ohow]], le wikicréole Ocsigen inclut un
puissant système d'extensions avec la syntaxe suivante :
{{{wikiext(ext attr1="val1" attr2="val2" | content)}}}, où le contenu ~content~
est analysé récusivement et les valeurs ~valN~ non.

**** Classes {{{html}}} /inline/
Il est enfin possible d'ajouter des classes {{{html}}} à des éléments
individuellement. Par exemple, ~@@class="title"@@== Level 2 heading~
génère ~<h2 class="title">Level 2 heading</h2>~.

** TODO GitHub Pages<<sec:anx-ghpages>>
** TODO La programmation multi-tiers<<sec:anx-pmt>>

* Footnotes

[fn:1] Laboratoire de Recherche et Développement de l'ÉPITA

[fn:2] Institut National de Recherche en Informatique et en Automatique

[fn:3] L'Initiative pour la Recherche et l'Innovation sur le Logiciel Libre. C'est un laboratoire de recherche français.
Ce centre a été créé en septembre 2010 par l'{{{inria}}} avec l'Université Pierre-et-Marie-Curie et l'Université Paris
VII - Diderot.

[fn:4] Il existe en {{{ocaml}}} une convention de nommage pour les fonctions de conversion. Par exemple, la fonction standard
qui convertit un ~int~ en ~string~ s'appelle ~string_of_int~. C'est en suivant cette convention que l'outil qui transforme du
wikicréole en {{{html}}} s'appelle html_of_wiki.

[fn:5] Cela est dû au fonctionnement de GitHub Pages. Pour plus d'information consulter l'annexe [[sec:anx-ghpages]] sur GitHub Pages.

[fn:6] GitHub Pages permet de définir des redirections sous forme de liens symboliques. Consulter l'annexe [[sec:anx-ghpages]]
pour plus d'informations.

[fn:7] Toutes les extensions acceptent les attributs ~class~ et ~id~ correspondant aux attributs {{{html}}} de même nom.

[fn:8] Les descriptions données sont simplement indicatives. Les extensions complexes seront décrites avec plus de précision
lors de l'explication des problèmes techniques qu'elles causent.

[fn:9] Cela permet de rendre le programme plus simple à maintenir mais aussi plus en accord avec la philosophie
Unix. "Make each program do one thing well."

[fn:10] Ceci ne concerne que les liens entre les pages du projet. Les liens vers d'autres sites web sont nécéssairement absolus.

[fn:11] Une utilisation idomatique de la ligne de commande des systèmes Unix est de composer différents programmes
simples pour réaliser une action complexe. "Expect the output of every program to become the input to another, as yet unknown, program."

[fn:12] Il existe d'autres syntaxes standard pour les liens, ainsi que de nombreuses abréviations. Pour plus
d'informations, consulter l'annexe [[sec:anx-wikicreole]] sur le wikicréole.

[fn:13] L'on parle de "chapitre" pour désigner les pages web du manuel et de "page" pour désigner les pages web de(s) {{{api}}}(s),
mais les deux termes désignent bien tous deux des pages {{{html}}} classique.

[fn:14] /Application Programming Interface/ ou "interface de programmation applicative", désigne l'ensemble
des /fonctionnalités/ (fonctions, classes, types, etc.) que le concepteur d'un service fournit à son
utilisateur. L'{{{api}}} constitue le /sous-ensemble/ de l'implantation du service qui est /ouvert/ à
ses utilisateurs et auquel ces derniers sont censés se limiter.

[fn:15] Il y a également un mécanisme (désirable) intégré à GitHub Pages concernant ~index.html~. Consulter l'annexe
[[sec:anx-ghpages]] sur GitHub Pages pour plus de détail.

[fn:16] La notation ~foo*~ est tirée de la syntaxe shell (plus spécifiquement du /globbing/) afin de désigner tous les fichiers
préfixés par ~foo~. Cette notation est utilisée ici pour dénoter toutes les extensions préfixées par ~a_api~, c'est-à-dire
~a_api~, ~a_api_code~ et ~a_api_type~. De la même manière ~a_*~ désigne toutes les extensions ayant fonction de lien implantées
pour le projet Ocsigen.

[fn:17] C'est une conséquence de la /programmation multi-tiers/. Voir l'annexe [[sec:anx-pmt]] sur ce style de programmtion pour
plus d'informations.

[fn:18] Le site web est dit /responsive/, c'est-à-dire qu'il s'adapte aux différentes résolutions d'appareils (laptop,
tablette, smartphone, etc.) et lorsque la largeur est trop faible, le menu de gauche "se déplace" dans le menu droite.
Il n'y a en réalité aucun travail supplémentaire à fournir du côté du compilateur de wikicréole, c'est un travail
de webdesign essentiellement en {{{css}}}.

[fn:19] La syntaxe ~@@class="cls"@@~ permet d'ajouter une classe {{{html}}} à l'élément suivant. Voir l'annexe [[sec:anx-wikicreole]]
sur le wikicréole pour plus d'informations.

[fn:20] Une légère adaptation de la convention de nommage ~A_of_B~ d'{{{ocaml}}} ("wiki_of_template" n'aurait pas eu beaucoup
de sens puisque les deux sont paramètres de l'outil).

[fn:21] Afin de simplifier l'écriture de celle-ci la commande du listing [[lst:c1-c2-template]] utilise une fonctionnalité
/non-{{{acr(Posix)}}}/ : les /process substitutions/. Il est néanmoins possible d'obtenir le même effet avec plusieurs
commandes et l'utilisation de fichiers temporaires.

[fn:22] Voir l'annexe [[sec:anx-ghpages]] pour plus d'informations.
