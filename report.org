#+TITLE: Rapport de stage chez BeSport
#+AUTHOR: Léo Valais (valais_l)
#+EMAIL: leo.valais@epita.fr
#+DATE: <2018-11-09 ven.>
#+LANGUAGE: fr
#+STARTUP: overview latexpreview
#+OPTIONS: ^:{} ':t H:4

#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \usepackage{xspace}
#+LATEX_HEADER: \usepackage[francais]{babel}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{minted}
# #+LATEX_HEADER: \usepackage{beton}
# #+LATEX_HEADER: \usepackage{euler}
# #+LATEX_HEADER: \usepackage[ttdefault,scale=0.9]{sourcecodepro}
#+LATEX_HEADER: \usepackage{fontawesome}
#+LATEX_HEADER: \usepackage{xparse}
#+LATEX_HEADER: \usepackage[in]{fullpage}
#+LATEX_HEADER: \usepackage{flatbox/flatbox}

#+LATEX_HEADER: \NoAutoSpaceBeforeFDP
#+LATEX_HEADER: \usetikzlibrary{positioning,shapes}

#+NAME: setup-emacs-and-org
#+BEGIN_SRC elisp :exports results :results silent
  (setq org-confirm-babel-evaluate (lambda (l b) nil))
  (setq org-latex-listings 'minted
        org-latex-custom-lang-environments '()
        org-latex-minted-options '(("frame" "leftline")
                                   ("fontsize" "\\scriptsize")
                                   ("linenos" ""))
        org-latex-to-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+BEGIN_COMMENT
L'exporter de latex se trouve dans le fichier ox-latex.el
de org-plus-X/ dans elpa/.
Peut-être supprimer l'exporter d'example pour générer simplement
un \begin{example}\end{example} où l'environment peut être définit
comme on veut.
#+END_COMMENT

#+LATEX: \newenvironment{note}{\begin{noteffbox}{Note}\small}{\end{noteffbox}}
#+LATEX: \newenvironment{ex}{\begin{exampleffbox}{Exemple}\small}{\end{exampleffbox}}

#+MACRO: acr \textsc{$1}
#+MACRO: lrde {{{acr(Lrde)}}}
#+MACRO: inria {{{acr(Inria)}}}
#+MACRO: api {{{acr(Api)}}}
#+MACRO: lang $1
#+MACRO: cl Common Lisp
#+MACRO: ocaml OCaml
#+MACRO: html {{{acr(Html)}}}
#+MACRO: htmltag \texttt{<}\texttt{$1}\texttt{>}
#+MACRO: wikiext \texttt{<}\texttt{<}\texttt{$1}\texttt{>}\texttt{>}
#+MACRO: wikilink \sloppy\texttt{[[$1]]}

#+BEGIN_COMMENT
TODO
- étoffer l'introduction
- finir et peaufiner [[fig:how-arch]]
- faire la présentation de BeSport
- intégrer mon thème latex
- styliser les tableaux
#+END_COMMENT

* Introduction
Ayant travaillé sur un projet en {{{cl}}} au {{{lrde}}}\(\)[fn:4], je souhaitais trouver
un stage centré sur la programmation fonctionnelle, de préférence avec un langage
statiquement typé. J'ai donc accepté le stage que la startup /BeSport/ m'a proposé
essentiellement pour deux raisons :

1. leur langage de prédilection est {{{ocaml}}}. C'est un langage fondamentalement
   fonctionnel, statiquement typé développé à l'{{{inria}}}\(\)[fn:5]. Cela correspond donc
   parfaitement aux attentes que j'avais en termes de technologies.
2. leurs applicatifs (/backend/, /frontend/, /importation de données/, etc.) sont
   entièrement développés en {{{ocaml}}}, nottament grâce au
   [[https://ocsigen.org][projet Ocsigen]], permettant le développement d'applications dites /multi-tiers/.
   Habituellement développées en {{{lang(JavaScript)}}} (NodeJS pour le backend et
   ReactJS, Angular ou VueJS pour le frontend le plus souvent), l'utilisation de
   {{{ocaml}}}, de sa /rigueur/, de son /système de types fort/, sur
   /l'intégralité de la stack/, permet entres autres :
   - de partager les structures de données et fonctions entre le code client et
     le code serveur,
   - de vérifier statiquement les pages web générées pour être conforme à la
     [[https://www.w3.org/standards/][norme W3C]], et
   - toujours bénéficier des technologies {{{lang(JavaScript)}}} de pointe grâce
     au compilateur [[http://ocsigen.org/js_of_ocaml/][Js_of_ocaml]].

Le sujet proposé sur la convention est :
#+BEGIN_QUOTE
Développement de bibliothèques pour l'application Be Sport.
Le but du stage est de développer de nouveaux modules pour les applications Web
et mobiles Be Sport : outils d'importation de données, amélioration des outils de
développement (dans le cadre du projet libre Ocsigen), développement de widgets
spécifiques, interaction avec la base de données, mise en place de tests de l'application.
Le stagiaire s'occupera des spécifications en collaboration avec les membres de
l'équipe, puis travaillera sur un prototype et ira jusqu'à la mise en production.
#+END_QUOTE

Ce sujet, vaste, permet d'avoir un aperçu des différentes fonctionnalités de BeSport
tout en exploitant au maximum les possibilités du langage {{{ocaml}}} et du projet
Ocsigen.

Cependant, en arrivant, il m'a été confié une mission plus urgente que le développement
de l'application BeSport :
/la création d'un outil ergonomique de gestion de la documentation du projet Ocsigen pour GitHub Pages/.
En effet, la documentation est écrite dans un format particulier ([[http://ocsigen-1.inria.fr/ocsimore/dev/manual/wiki][le wikicréole]]) muni d'extensions
propriétaires, qu'il est nécéssaire de compiler vers de l'{{{html}}} à chaque modification de celle-ci.
C'était le but de =Ocsimore= et =Ocsiforge=, outils du projet Ocsigen, aujourd'hui dépréciés.
Les remplacent un outil interne, lourd, monolithique et peu flexible, qu'il m'a été demandé de remplacer.
Ma mission consiste donc à développer cet outil, simple, ergonomique et flexible, générant les pages
de documentation au format {{{html}}}, afin de les téléverser vers GitHub Pages.

Mes attentes par rapport à ce stage sont multiples.
- Découvrir l'utilisation professionnelle de langages fonctionnels et de {{{ocaml}}}
  en particulier.
- Découvrir la programmation multi-tiers au travers du projet Ocsigen.
- Une introduction à l'univers de la startup et les différentes méthodologies
  de travail telles qu'{{{acr(agile)}}} et {{{acr(scrum)}}} et les pratiques associées.
- Une première expérience de la collaboration à plus grande échelle que les
  projets scolaires, avec des enjeux réels.

* one_html_of_wiki
** But général<<sec:ohow-but-grl>>
*** Le wikicréole
Le projet Ocsigen est vieux de plus de dix ans. Les formats de documentation
actuellement répandus, tels que le Markdown ou le reStructured Text, n'existaient
alors pas ou commencaient à émerger. Le seul format alors en vigueur était le format
/wiki/ de Wikipédia, et toutes ses déclinaisons. C'est l'une d'entre elles qui
a été choisie pour la documentation du projet Ocsigen : le /wikicréole/.
Le wikicréole, qui a l'avantage d'être arrivé plus tard que ses concurrents,
est pensé pour corriger les erreurs de conception que ces derniers ont pu
commettre, tout en conservant l'esprit et la syntaxe générale de ceux-ci.

#+NAME: lst:example-wiki
#+CAPTION: Exemple de texte formatté en wikicréole.
#+INCLUDE: "example.wiki" src text

Le listing [[lst:example-wiki]] montre un texte formatté en wikicréole. C'est donc
un format léger et relativement pratique à utiliser, mais il est nécéssaire de le
convertir en {{{html}}} pour pouvoir le publier (sur GitHub Pages dans le cas de BeSport).

*** =Ocsimore= et =Ocsiforge=
C'était le but des outils =Ocsimore= et =Ocsiforge=, autrefois partie du projet
Ocsigen, aujourd'hui dépéciés et plus maintenus.

Leur rôle était de fournir une infrastructure permettant de gérer la documentation
d'un ensemble de projets. Ils servaient, entres autres, à:
- convertir la documentation de chaque projet du wikicréole vers de l'{{{html}}},
- insérer les pages web dans des /templates/ (de patrons) de page web,
- gérer les différentes version de la documentation de chaque projet,
- gérer les permissions sur l'écriture de la documentation,
- déployer la documentation générée sur internet,
- proposer un blog, un newsfeed, un blog, etc., et
- gérer un base d'utilisateurs s'étant inscrits sur le site déployé.

De plus, =Ocsimore= a ajouté au wikicréole un système /d'extensions/ afin d'étendre
les possibilités du langage. Schématiquement, les extensions fonctionnent de la manière
suivante:
- Chaque extension s'enregistre auprès du compilateur (elle donne son nom ---
  par exemple ~"myext"~ --- et une fonction {{{ocaml}}} --- ~f~).
- Lorsque l'extension est rencontrée dans fichier --- {{{wikiext(myext arg="val" | content)}}} ---
  le compilateur appelle la fonction associée --- ~f [("arg", "val")] content~.
- La fonction retourne alors le code {{{html}}} qui sera mis à la place de l'extension
  le fichier final.
Ce puissant système d'extensions naturellement /Turing-complet/
permet d'étendre considérablement le wikicréole.

Cependant ces projets devenant trop lourds et difficile à maintenir, leur support
et leur développement a été arrêté et une majorité de leur fonctionnalités
abandonnées. Mais parmi celles-ci,
/l'exportation des wikis vers des pages {{{html}}} se devait d'être conservée/
pour garantir la disponibilité de la documentation aux utilisateurs du projet Ocsigen.

*** =html_of_wiki=
C'est dans cette optique qu'est né le projet =html_of_wiki=[fn:1] (abbrégé =how=).
Cet outil reprend une partie du code d'=Ocsimore=, l'analyseur syntaxique (/lexer/)
et l'analyseur grammatical (/parser/), mais est /complètement dédié au projet Ocsigen/.
C'est donc un outil /interne/. Son objectif initial devait être simplement de convertir
le wikicréole en {{{html}}}. Cependant, comme ce projet est en réalité une
/simplification d'=Ocsimore=/, il est à cause de cela soumis à un certain nombres
de contraintes, en particulier en termes de condition d'utilisation. Pour comprendre
en quoi la présence de ces contraintes d'utilisation est indésirable, il faut
d'abord s'intéresser au fonctionnement de =how=.

1. =how= clone le dépôt git dédié nommé =ocsigen.org-data=, qui contient la documentation
   de chaque version de chaque projet.
2. =how= compile ensuite chaque fichier ~*.wiki~ en un fichier {{{html}}}, tout en
   s'assurant que chaque lien et valide (signale les liens morts) et que les
   /extensions/ sont bien exécutées.
3. Les pages {{{html}}} sont ensuite placées dans un dossier =ocsigen.org-repositories=.
4. Ces pages sont enfin copiées dans la branche ~gh-pages~ du projet auquel elles
   appartiennent et sont poussées vers GitHub.

Plusieurs inconvénients majeurs se distinguent déjà.
- Ou bien l'on génère /toute/ la documentation, ou bien l'on ne génère /rien/.
  Il n'est pas possible de ne compiler que quelques fichiers choisis, ou qu'une
  version donnée d'un projet donné.
- /Toute/ la documentation de /toutes/ les versions de /tous/ les projets
  se trouve dans /un seul/ dépôt =ocsigen.org-data=. Celui-ci est donc trop lourd
  (plusieurs gigaoctets).
- Il faut penser manuellement à ajouter les nouvelles versions de chaque projet à
  ce dépôt.
- La nécéssité de =ocsigen.org-data= induit une forte désorganisation au sein
  des projets :
  - le code d'un projet $X$ se trouve sur ~master~ dans le dépôt $X$,
  - les wikis de $X$ se trouvent se trouvent dans le dossier $X$ de =ocsigen.org-data=, et
  - les pages {{{html}}} générées se trouvent sur la branche ~gh-pages~
    du dépôt $X$.

D'autre part, =how= souffre également des problèmes suivants:
- La page d'accueil \sloppy[[https://ocsigen.github.io]] doit être traitée comme un cas
  particulier[fn:2].
- Les liens générés sont des liens /absolus/, ce qui proscrit toute modification
  de l'architecture des projets ou du site au risque de casser la plupart des liens.
- Puisque la gestion des versions est manuelle, la gestion des redirections l'est
  aussi[fn:3].
  #+begin_ex
  La page d'accueil du projet =Eliom= doit être ~eliom/2.8/intro.html~,
  en supposant que ~2.8~ est la dernière version en date. Il faut alors créer le
  lien symbolique ~index.html~ à la racine du projet sur la branche ~gh-pages~
  et le faire pointer vers ~intro.html~. À la sortie de la version ~2.9~, il
  faut alors penser à placer les wikis dans ~ocsigen.org-data/eliom~, mais aussi
  à mettre à jour le lien ~eliom/index.html~ décrit ci-dessus.
  #+end_ex
- Un certain nombre d'inconvénients mineurs (par exemple, devoir mettre les wikis
  ayant le rôle de manuel d'utilisation dans un dossier ~src/~).

La figure [[fig:how-arch]] illustre et résume la (lourde) architecture nécéssaire pour faire
fonctionner =html_of_wiki=.

=how= est donc un outil qui fonctionne, mais lourd, monolithique, peu flexible
et peu ergonomique. La mission de créer un outil pour le remplacer m'a donc été confiée.

#+NAME: fig:how-arch
#+CAPTION: Architecture nécéssaire pour faire fonctionner =html_of_wiki=.
#+begin_figure
#+INCLUDE: "how-arch.tex" export latex
#+end_figure

*** =one_html_of_wiki=
L'idée était donc de simplifier drastiquement =how= mais en le privant du minimum
de fonctionnalités possible. Ce nouvel outil devait être capable de compiler les
wikis /un par un/ et *sans examen de dépendances* pour la construction des liens.
C'est pour cela que cet outil a été nommé =one_html_of_wiki= (abbrégé =ohow=).
Cet outil se devait d'être /simple/ et /composable/ (plus en accord avec la
philosophie Unix). Cependant, cela implique la nécéssité d'un
outil supplémentaire, capable d'utiliser =ohow= pour générer la documentation
/d'une version entière/ d'un projet donné : =doc_of_project= (abbrégé =dop=).
Ces deux outils ont donc principalement pour but de :
- remplacer définitivement =how=,
- avoir la possibilité de placer la documentation des projets ailleurs que
  dans ~ocsigen.org-data~ et de s'en débarasser,
- garder la syntaxe wikicréole extensible, et surtout,
- /reproduire le site existant au minimum à l'identique/ (au mieux avec
  quelques améliorations).

Le listing [[lst:example-html]] montre le code {{{html}}} généré par =ohow= à partir
du wikicréole du listing [[lst:example-wiki]].

#+BEGIN_SRC shell :exports none :results silent
eval $(opam config env)
/home/vleo/work/besport/html_of_wiki/ohow.byte --headless example.wiki
#+END_SRC

#+NAME: lst:example-html
#+CAPTION: Le code {{{html}}} du wiki du listing [[lst:example-wiki]] produit par =one_html_of_wiki=.
#+INCLUDE: "example.html" src html

L'objectif principal est de remplacer l'utilisation de =how= en /interne/. Cependant,
dans un second temps et selon mon choix, il est aussi possible de pousser le
développement de ces outils plus loin, afin de les /distribuer/ et de les rendre
utilisables par la communauté {{{ocaml}}} (en réalité par tous ceux ayant ou
souhaitant avoir de la documentation écrite en wikicréole extensible).

** Cahier des charges
Comme expliqué dans la [[sec:ohow-but-grl][section "But général"]], le cahier des charges pour ce projet
dépasse la simple réalisation de l'outil =one_html_of_wiki=. Les principaux
objectifs de cette mission sont les suivants.

- Remplacer =html_of_wiki= par la combinaison de deux outils: =one_html_of_wiki=,
  le compilateur wikicréole \rightarrow {{{html}}} qui opère fichier par fichier et
  =doc_of_project=, qui opère version de projet par version de projet,
- conserver le même format de wikicréole et les même extensions (100% rétrocompatible avec =how=),
- être capable, à l'aide de ces outils, de regénérer le site [[https://ocsigen.org]]
  à l'identique,
- l'améliorer et régler ses différents problèmes techniques (barre de recherche,
  design, etc.),
- trouver une solution pour se passer du dépôt ~ocsigen.org-data~, et,
- éventuellement rendre =ohow= suffisament indépendant du projet Ocsigen pour
  pouvoir le diffuser et qu'il puisse être utilisé sur d'autres projets.

L'on commence par spécifier le langage que doit supporter =ohow=, puis l'on dresse
son cahier des charges détaillé. Nous continuons par la description de celui
de =dop= et finissions par la liste des objectifs à atteindre quant à l'organisation
du projet Ocsigen.

*** Le langage à supporter : le wikicréole extensible
**** Le wikicréole
La spécification du langage wikicréole utilisée par le projet Ocsigen est décrite
dans l'annexe TODO.

**** Les extensions
La documentation du projet Ocsigen s'appuie fortement sur une construction syntaxique
particulière : /les extensions/. Ce sont des constructions non-standard du wikicréole
développées afin d'augmenter les capacités du langage en permettant l'éxecution de
code {{{ocaml}}} /pendant la compilation/ du fichier.

Concrètement, les extensions ont la syntaxe suivante:
#+BEGIN_SRC text
  <<extension_name attr1="val1" attr2="val2" ... attrN="valN" | content>>
#+END_SRC

#+begin_note
- Les attributs sont conçus pour avoir des valeurs (~val1~, ~val2~, etc.) contenant
  du /texte brut/ à utiliser comme paramètre pour la fonction {{{ocaml}}}.
- En revanche, le contenu ~content~ de l'extension peut contenir du wikicréole,
  /arbitrairement complexe/, s'étendant possiblement sur plusieurs lignes, pouvant
  lui aussi /contenir des extensions/ et est donc conçu pour être /compilé récursivement/.
#+end_note

L'auteur de chaque extension doit alors /l'enregistrer auprès du compilateur/ de
wikicréole en lui fournissant le *nom* de l'extension (ici ~"extension_name"~) ainsi
qu'une *fonction {{{ocaml}}}* qui sera appelée à chaque fois que l'extension
est rencontrée dans le fichier en train d'être compilé. Cette fonction doit
retourner du code {{{html}}} qui sera positionné à l'endroit où se situe l'extension
dans la page web produite.

Le listing [[lst:ext-ex]] illustre comment ajouter une extension au compilateur décrit dans
le paragraphe suivant et permet de comprendre aisément en quoi ce système est très
puissant de par sa capacité à excécuter du code arbitrairement complexe au coeur du
processus de compilation.

#+NAME: lst:ext-ex
#+CAPTION: Code {{{ocaml}}} nécéssaire pour ajouter l'extension ~"colored"~.
#+INCLUDE: "ext-ex.ml" src ocaml

Le tableau [[tab:ext-to-support]] liste et décrit les extensions (et leur attributs[fn:7])
définies pour le projet Ocsigen que =ohow= doit pourvoir supporter[fn:6].

#+NAME: tab:ext-to-support
#+CAPTION: Extensions Ocsigen que =ohow= doit impérativement supporter.
#+begin_table
#+LATEX: \small
|------------------------+------------------------------------+---------------------------------------------------|
| Nom                    | Attributs                          | Courte description                                |
|------------------------+------------------------------------+---------------------------------------------------|
| ~a_api_code~           | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API (implémentation).       |
| ~a_api_type~           | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API (déclarations).         |
| ~a_api~                | ~project~, ~subproject~, ~version~ | Insère un lien vers l'API du projet donné.        |
| ~a_file~               | ~src~                              | Insère un lien vers un fichier quelconque.        |
| ~a_img~                | ~src~                              | Insère une image.                                 |
| ~a_manual~             | ~project~, ~chapter~, ~version~    | Insère un lien vers le chapitre donné.            |
| ~client-server-switch~ |                                    | Insère un lien API client \leftrightarrow API serveur.          |
| ~code-inline~          | ~language~                         | Insère du code à l'intérieur d'un paragraphe.     |
| ~code~                 | ~language~                         | Insère un bloc de code.                           |
| ~div~                  |                                    | Insère un élément {{{html}}} ~<div>~.             |
| ~doctree~              |                                    | Insère le menu du projet.                         |
| ~docversion~           |                                    | Insère une liste de versions à afficher.          |
| ~drawer~               |                                    | Insère un menu latéral déroulant.                 |
| ~googlesearch~         |                                    | Insère une barre de Google Search.                |
| ~nav~                  |                                    | Insère un élément {{{html}}} ~<nav>~.             |
| ~pre~                  |                                    | Insère un élément {{{html}}} ~<pre>~.             |
| ~reason-switch~        |                                    | Convertit le {{{ocaml}}} en {{{lang(ReasonML)}}}. |
| ~script~               | ~src~                              | Insère un script {{{lang(JavaScript)}}}.          |
| ~span~                 |                                    | Insère un élément {{{html}}} ~<span>~.            |
| ~wip-inline~           |                                    | De même mais à l'intérieur d'un paragraphe.       |
| ~wip~                  |                                    | Marque un contenu "Work In Progress".             |
| extension sans nom     |                                    | N'insère rien : a fonction de commentaire.        |
|------------------------+------------------------------------+---------------------------------------------------|
#+end_table

**** Le compilateur wikicréole \rightarrow {{{html}}}
Comme expliqué dans la section [[sec:ohow-but-grl]], =ohow= doit être construit par dessus
=how=, lui-même écrit à partir de =Ocsimore= et =Ocsiforge=. Ces derniers avaient
implémenté un compilateur wikicréole \rightarrow {{{html}}} écrit en {{{ocaml}}} afin de
pouvoir remplir leur fonction. Ce compilateur a été repris par =how= et
/doit également être réutilisé par =ohow=/.

Cependant celui-ci doit d'être /modifié/, nottament ce qui concerne la génération
de liens entre les pages web. En effet, les liens générés sont des /liens absolus/,
trop rigides (il est impossible de tester localement le site web généré puisque les
liens pointent vers des URLs comme [[https://ocsigen.org/project/page]]). Il faut donc
modifier les procédures concernées afin de générer les /liens relatifs/, plus flexibles,
mais plus contraignants à implémenter.

*** L'outil principal : =one_html_of_wiki=
La fonction de =one_html_of_wiki= est /simple/ et /unique/[fn:10]:
#+BEGIN_QUOTE
Pouvoir compiler les fichiers wikicréole *individuellement* et *sans examen de dépendances* (compilation *isolée*).
#+END_QUOTE

C'est-à-dire que =ohow= peut être appelé à compiler un fichier ~mydoc.wiki~ et
doit produire ~mydoc.html~, document {{{html}}} consultable depuis un navigateur
web et conforme à la [[https://www.w3.org/standards/][norme W3C]]. L'outil doit avoir généré des liens /relatifs/ et
/valides/ sans vérifier que la page de destination existe.

**** Objectifs
- C'est un outil en /ligne de commande/, écrit en {{{ocaml}}} qui doit réutiliser le
  compilateur wikicréole \rightarrow {{{html}}} de =how=.
- Le fichier wikicréole à compiler ne doit pas être modifié.
- Les pages {{{html}}} produites doivent être complètes (avec un en-tête ~<head>~ correct).
- Il doit être possible de ne pas générer cet en-tête avec l'option ~--headless~.
- Les pages {{{html}}} produites doivent etre conformes à la [[https://www.w3.org/standards/][norme W3C]].
- Les liens générés doivent être _tous_[fn:8] relatifs.
- Il ne doit pas y avoir d'examen de dépendances.
- Il doit être possible de tester les pages localement avec des liens redirigeant
  vers des adresses existantes (option ~--local~).
- Il doit gérer (au minimum) les extensions listées par le tableau [[tab:ext-to-support]].

**** Interface à respecter
- Il doit y avoir une option ~--print~ pour afficher le code {{{html}}} résultant
  dans la console (sortie standard) afin de pouvoir être composé[fn:9].
- Il doit y avoir une option ~--output FILE~ pour sélectionner le nom du fichier
  {{{html}}} de sortie. En conséquence, les deux commandes du listing [[lst:ohow-equiv]]
  doivent produire /exactement/ le même résultat.
- Pour des raisons de commodité, =ohow= doit pouvoir accepter plusieurs fichiers
  en entrée mais les résultats dans ce cas-là doivent être /strictement les mêmes/
  que si =ohow= avait été exécuté $n$ fois pour chacun des $n$ fichiers donnés.
- Il doit y avoir une option ~--help~ qui affiche la liste des options disponibles
  et qui fournit une description succinte de l'outil.
- La version de l'outil doit pouvoir être affichée avec l'option ~--version~.

#+NAME: lst:ohow-equiv
#+CAPTION: Relation entre les options ~--print~ et ~--output~ de =ohow=.
#+begin_listing
#+BEGIN_SRC shell
  $ ohow --output out.html mydoc.wiki # has the same effet as
  $ ohow --print mydoc.wiki > out.html
#+END_SRC
#+end_listing

**** Les Liens
Le cas des liens est complexe, déjà car il existe deux manières d'écrire un lien
en wikicréole étendu :
- avec la syntaxe wikicréole standard, par exemple
  {{{wikilink(wiki(name):page)}}} ou encore {{{wikilink(site:address)}}}\(\)[fn:11], et,
- avec les extensions Ocsigen ~a_manual~, ~a_api~, ~a_img~, etc.

Le problème est que ces deux types de liens sont traités dans deux parties
bien distinctes du compilateur.


#+NAME: setup-org-latex-src-block-dispatch-export
#+BEGIN_SRC elisp :exports none :results silent
  ;; (unless (fboundp '-old--org-latex-src-block)
  ;;   (fset '-old--org-latex-src-block (symbol-function 'org-latex-src-block)))
  ;; (defun org-latex-src-block (src-block _contents info)
  ;;   (let* ((attr (org-export-read-attribute :attr_latex src-block))
  ;;          (inline-p (plist-get :inline attr)))
  ;;     (error "inline-p %S attr %S info %S" inline-p attr info)
  ;;     (if inline-p
  ;;         (progn
  ;;           (push '(ocaml "ocamlinline") org-latex-custom-lang-environments)
  ;;           (-old--org-latex-src-block src-block _contents info)
  ;;           (pop org-latex-custom-lang-environments))
  ;;       (-old--org-latex-src-block src-block _contents info))))

  ;; (push '(ocaml "ocamlinline") org-latex-custom-lang-environments)
#+END_SRC

Pour la syntaxe standard {{{wikilink(link)}}}, la déduction de l'URL (c'est-à-dire
le chemin vers la page de destination) est faite lors de la génération des éléments
{{{html}}}. Concrètement, il existe une fonction
~href_of_link : string -> 'a Html5.elt list -> [> 'a Html_types.a ] Html5.elt~
qui, pour chaque lien (syntaxe standard) du wiki, associe l'élément ~<a/>~ correspondant,
c'est-à-dire la balise {{{html}}} utilisée pour créer un lien sur une page web
(dont le type avec ~Tyxml~ est ~[> 'a Html_types.a ] Html5.elt~).
Cette fonction est appelée par le compilateur /directement/ et est au coeur du
processus de compilation.

#+NAME: lst:example-href_of_link
#+CAPTION: Comment est généré le lien {{{html}}} correspondant à {{{wikilink(wiki(eliom):intro|goto intro)}}}.
#+begin_listing
#+BEGIN_SRC ocaml
  (* Pour le lien [[wiki(eliom):intro]], la fonction [href_of_link] est appelée ainsi : *)
  href_of_link "wiki(eliom):intro" [Tyxml.Html.pcdata "goto intro"]
  (* Elle retourne alors un élément Tyxml créé comme suit : *)
  Tyxml.Html.(a ~a:[a_href "../../the/path/to/eliom/intro"] [pcdata "goto intro"])
  (* Cet élément correspond à la construction HTML suivante : *)
  (* <a href="../../the/path/to/eliom/intro">goto intro</a> *)
#+END_SRC
#+end_listing

#+begin_ex
Le listing [[lst:example-href_of_link]] montre en quoi la fonction ~href_of_link~
est responsable d'une déduction de liens correcte et aussi, plus généralement,
comment l'on peut générer des morceaux d'{{{html}}} en {{{ocaml}}} à l'aide
de la bibliothèque Tyxml (appartennant au projet Ocsigen).
#+end_ex

En revanche, pour les extensions, le fonctionnement est différent et un exemple
d'implémentation d'une extension simple est donné par le listing [[lst:ext-ex]].
Les extensions qui ont fonction de lien dans la documentation du projet Ocsigen
sont les suivantes :
- ~a_manual~ qui décrit un lien vers une page du manuel,
- ~a_api~, ~a_api_type~, ~a_api_code~ qui décrivent un lien vers la page de
  documentation d'un symbole d'une {{{api}}}\(\)[fn:12],
- ~a_img~ qui insère une image (balise {{{html}}} ~<img/>~) à l'endroit donné, et,
- ~a_file~ qui décrit un lien vers un fichier quelconque à télécharger, stocké au
  même endroit que le site généré (GitHub Pages dans le cas du projet Ocsigen).

Le tableau [[tab:link-exts]] décrit les attributs que ces extensions doivent supporter.
Le listing [[lst:link-exts-ex]] donne un exemple d'utilisation de ces extensions.

#+NAME: tab:link-exts
#+CAPTION: Description des attributs des extensions Ocsigen ayant fonction de lien.
#+begin_table
#+LATEX: \small
|--------------+-------------------------------------+-----------------------------------------+-------------------|
| Attribut     | Extensions concernées               | Description                             | Valeur par défaut |
|--------------+-------------------------------------+-----------------------------------------+-------------------|
| ~project~    | Tous sauf ~a_img~ et ~a_file~       | Le projet contenant la page             | Projet courant    |
| ~chapter~    | ~a_manual~                          | Le chapitre du manuel contenant la page | Aucun             |
| ~subproject~ | ~a_api~, ~a_api_type~, ~a_api_code~ | Le sous-projet contenant le symbole     | Aucun             |
| ~text~       | ~a_api~, ~a_api_type~, ~a_api_code~ | Texte du lien produit                   | Le symbole        |
| ~version~    | Tous sauf ~a_img~ et ~a_file~       | La version du projet contenant la page  | Version courante  |
| ~fragment~   | Tous sauf ~a_img~ et ~a_file~       | /Fragment/ (ou /ancre/) {{{html}}}      | Aucune            |
| ~src~        | ~a_img~, ~a_file~                   | Le chemin vers la ressource à lier      | /Requis/          |
|--------------+-------------------------------------+-----------------------------------------+-------------------|
#+end_table

#+NAME: lst:link-exts-ex
#+CAPTION: Exemple d'utilisation des liens sous forme d'extensions Ocsigen.
#+begin_listing
#+BEGIN_SRC text
  <<a_manual project="eliom" chapter="intro" | introduction of Eliom's docs>>
  <<a_manual project="eliom" subproject="ppx" | index.html of the PPX subproject of Eliom>>
  <<a_manual version="2.1" | index.html of the current project version 2.1>>
  <<a_api project="eliom" subproject="server" text="some text" | type Eliom_client.server_function>>
  <<a_api_type project="eliom" subproject="server" | type Eliom_client.server_function>>
  <<a_file src="mindmap.pdf">>
  <<a_img src="logo.png">>
#+END_SRC
#+end_listing


#+BEGIN_EXPORT latex
\newpage
\listoffigures
\listoftables
\renewcommand{\listoflistingscaption}{Liste des listings}
\listoflistings
#+END_EXPORT

* Footnotes

[fn:12] /Application Programming Interface/ ou "interface de programmation applicative", désigne l'ensemble
des /fonctionnalités/ (fonctions, classes, variables, etc.) que le concepteur d'un service fournit à son
utilisateur. L'{{{api}}} constitue le /sous-ensemble/ de l'implémentation du service qui est /ouvert/ à
ses utilisateurs et auquel ces derniers sont censés se limiter.

[fn:11] Il existe d'autres syntaxes standard pour les liens, ainsi que de nombreuses abbréviations. Pour plus
d'informations, consulter l'annexe TODO sur le wikicréole.

[fn:10] Cela permet de rendre le programme plus simple à maintenir mais aussi plus en accord avec la philosophie
Unix. "Make each program do one thing well."

[fn:9] Une utilisation idomatique de la ligne de commande des systèmes Unix est de composer différents programmes
simples pour réaliser une action complexe. "Expect the output of every program to become the input to another, as yet unknown, program."

[fn:8] Ceci ne concerne que les liens entre les pages du projet. Les liens vers d'autres sites web sont nécéssairement absolus.

[fn:7] Toutes les extensions acceptent les attributs ~class~ et ~id~ correspondant aux attributs {{{html}}} du même nom.

[fn:6] Les descriptions données sont simplement indicatives. Les extensions complexes seront décrites avec plus de précision
lors de l'explication des problèmes techniques qu'elles causent.

[fn:5] Institut National de Recherche en Informatique et en Automatique

[fn:4] Laboratoire de Recherche et Développement de l'ÉPITA

[fn:3] GitHub Pages permet de définir des redirections sous forme de liens symboliques. Consulter l'annexe TODO pour plus d'informations.

[fn:2] Cela est dû au fonctionnement de GitHub Pages. Pour plus d'information consulter l'annexe TODO sur GitHub Pages.

[fn:1] Il existe en {{{ocaml}}} une convention de nommage pour les fonctions de conversion. Par exemple, la fonction standard
qui convertit un ~int~ en ~string~ s'appelle ~string_of_int~. C'est en suivant cette convention que l'outil qui transforme du
wikicréole en {{{html}}} s'appelle =html_of_wiki=.
